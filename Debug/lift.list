
lift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08005d3c  08005d3c  00006d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc0  08005fc0  0000708c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fc8  08005fc8  0000708c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc8  08005fc8  00006fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08005fd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000008c  0800605c  0000708c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800605c  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130f7  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316e  00000000  00000000  0001a1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0001d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d99  00000000  00000000  0001e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fc8  00000000  00000000  0001f241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c77  00000000  00000000  00038209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d28  00000000  00000000  0004fe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2ba8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f3c  00000000  00000000  000e2bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000e7b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d24 	.word	0x08005d24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08005d24 	.word	0x08005d24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <clearDisplay>:
    HAL_GPIO_WritePin(GPIOA, SEG_F_PIN, (segments & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, SEG_G_PIN, (segments & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void clearDisplay()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, SEG_A_PIN, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2180      	movs	r1, #128	@ 0x80
 8000578:	4812      	ldr	r0, [pc, #72]	@ (80005c4 <clearDisplay+0x54>)
 800057a:	f001 fe1f 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_B_PIN, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2140      	movs	r1, #64	@ 0x40
 8000582:	4811      	ldr	r0, [pc, #68]	@ (80005c8 <clearDisplay+0x58>)
 8000584:	f001 fe1a 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_PIN, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800058e:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <clearDisplay+0x54>)
 8000590:	f001 fe14 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_D_PIN, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059a:	480a      	ldr	r0, [pc, #40]	@ (80005c4 <clearDisplay+0x54>)
 800059c:	f001 fe0e 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SEG_E_PIN, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2180      	movs	r1, #128	@ 0x80
 80005a4:	4809      	ldr	r0, [pc, #36]	@ (80005cc <clearDisplay+0x5c>)
 80005a6:	f001 fe09 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_PIN, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2140      	movs	r1, #64	@ 0x40
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <clearDisplay+0x54>)
 80005b0:	f001 fe04 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_PIN, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <clearDisplay+0x54>)
 80005ba:	f001 fdff 	bl	80021bc <HAL_GPIO_WritePin>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020000 	.word	0x40020000
 80005c8:	40020400 	.word	0x40020400
 80005cc:	40020800 	.word	0x40020800

080005d0 <display_1>:

void display_1()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SEG_B_PIN, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2140      	movs	r1, #64	@ 0x40
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <display_1+0x20>)
 80005da:	f001 fdef 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_PIN, 1);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <display_1+0x24>)
 80005e6:	f001 fde9 	bl	80021bc <HAL_GPIO_WritePin>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020400 	.word	0x40020400
 80005f4:	40020000 	.word	0x40020000

080005f8 <display_2>:

void display_2()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, SEG_A_PIN, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <display_2+0x3c>)
 8000602:	f001 fddb 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_B_PIN, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	2140      	movs	r1, #64	@ 0x40
 800060a:	480b      	ldr	r0, [pc, #44]	@ (8000638 <display_2+0x40>)
 800060c:	f001 fdd6 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_PIN, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	2120      	movs	r1, #32
 8000614:	4807      	ldr	r0, [pc, #28]	@ (8000634 <display_2+0x3c>)
 8000616:	f001 fdd1 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SEG_E_PIN, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	4807      	ldr	r0, [pc, #28]	@ (800063c <display_2+0x44>)
 8000620:	f001 fdcc 	bl	80021bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_D_PIN, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062a:	4802      	ldr	r0, [pc, #8]	@ (8000634 <display_2+0x3c>)
 800062c:	f001 fdc6 	bl	80021bc <HAL_GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40020000 	.word	0x40020000
 8000638:	40020400 	.word	0x40020400
 800063c:	40020800 	.word	0x40020800

08000640 <openDoors>:
#include <stdio.h>

extern ElevatorStatus elevatorStatus;

// 문 열기 함수
void openDoors(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
    StepperMotor* doorMotor = (elevatorStatus.currentFloor == FLOOR_1) ? &stepmotot1 : &stepmotot2;
 8000646:	4b3d      	ldr	r3, [pc, #244]	@ (800073c <openDoors+0xfc>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d101      	bne.n	8000652 <openDoors+0x12>
 800064e:	4b3c      	ldr	r3, [pc, #240]	@ (8000740 <openDoors+0x100>)
 8000650:	e000      	b.n	8000654 <openDoors+0x14>
 8000652:	4b3c      	ldr	r3, [pc, #240]	@ (8000744 <openDoors+0x104>)
 8000654:	607b      	str	r3, [r7, #4]

    if (!sysStatus.openingStarted) {
 8000656:	4b3c      	ldr	r3, [pc, #240]	@ (8000748 <openDoors+0x108>)
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d018      	beq.n	8000698 <openDoors+0x58>
        sysStatus.openingStarted = true;
 8000666:	4b38      	ldr	r3, [pc, #224]	@ (8000748 <openDoors+0x108>)
 8000668:	2201      	movs	r2, #1
 800066a:	709a      	strb	r2, [r3, #2]
        sysStatus.doorFullyOpened = false;
 800066c:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <openDoors+0x108>)
 800066e:	2200      	movs	r2, #0
 8000670:	705a      	strb	r2, [r3, #1]
        sysStatus.leftSensorDetected = false;
 8000672:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <openDoors+0x108>)
 8000674:	2200      	movs	r2, #0
 8000676:	731a      	strb	r2, [r3, #12]
        sysStatus.rightSensorDetected = false;
 8000678:	4b33      	ldr	r3, [pc, #204]	@ (8000748 <openDoors+0x108>)
 800067a:	2200      	movs	r2, #0
 800067c:	735a      	strb	r2, [r3, #13]
        printf("Opening doors at floor %d\r\n", elevatorStatus.currentFloor);
 800067e:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <openDoors+0xfc>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	4831      	ldr	r0, [pc, #196]	@ (800074c <openDoors+0x10c>)
 8000686:	f004 fc81 	bl	8004f8c <iprintf>
        moveCursor(0, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	2000      	movs	r0, #0
 800068e:	f000 fc2d 	bl	8000eec <moveCursor>
        lcdString("open door       ");
 8000692:	482f      	ldr	r0, [pc, #188]	@ (8000750 <openDoors+0x110>)
 8000694:	f000 fc15 	bl	8000ec2 <lcdString>
    }

    if (!sysStatus.rightSensorDetected) {
 8000698:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <openDoors+0x108>)
 800069a:	7b5b      	ldrb	r3, [r3, #13]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <openDoors+0x70>
        rotateMotorContinuous(doorMotor, DIR_CW);
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 fec6 	bl	800143c <rotateMotorContinuous>
    }

    if (sysStatus.rightSensorDetected && !sysStatus.doorFullyOpened) {
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <openDoors+0x108>)
 80006b2:	7b5b      	ldrb	r3, [r3, #13]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d01f      	beq.n	80006fa <openDoors+0xba>
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <openDoors+0x108>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f083 0301 	eor.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d017      	beq.n	80006fa <openDoors+0xba>
        stopMotor(doorMotor);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 feec 	bl	80014a8 <stopMotor>
        printf("Door fully opened at floor %d\r\n", elevatorStatus.currentFloor);
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <openDoors+0xfc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	481f      	ldr	r0, [pc, #124]	@ (8000754 <openDoors+0x114>)
 80006d8:	f004 fc58 	bl	8004f8c <iprintf>
        moveCursor(0, 0);
 80006dc:	2100      	movs	r1, #0
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 fc04 	bl	8000eec <moveCursor>
        lcdString("Door fully open");
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <openDoors+0x118>)
 80006e6:	f000 fbec 	bl	8000ec2 <lcdString>
        sysStatus.doorFullyOpened = true;
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <openDoors+0x108>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	705a      	strb	r2, [r3, #1]
        sysStatus.doorHoldStartTime = HAL_GetTick();
 80006f0:	f001 f9f4 	bl	8001adc <HAL_GetTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <openDoors+0x108>)
 80006f8:	6053      	str	r3, [r2, #4]
    }

    if (sysStatus.doorFullyOpened) {
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <openDoors+0x108>)
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d017      	beq.n	8000734 <openDoors+0xf4>
        uint32_t holdTime = HAL_GetTick() - sysStatus.doorHoldStartTime;
 8000704:	f001 f9ea 	bl	8001adc <HAL_GetTick>
 8000708:	4602      	mov	r2, r0
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <openDoors+0x108>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	603b      	str	r3, [r7, #0]
        if (holdTime >= DOOR_OPEN_TIME_MS) {
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000718:	4293      	cmp	r3, r2
 800071a:	d90b      	bls.n	8000734 <openDoors+0xf4>
            printf("Starting to close doors\r\n");
 800071c:	480f      	ldr	r0, [pc, #60]	@ (800075c <openDoors+0x11c>)
 800071e:	f004 fc9d 	bl	800505c <puts>
            elevatorStatus.state = CLOSE_DOORS;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <openDoors+0xfc>)
 8000724:	2203      	movs	r2, #3
 8000726:	705a      	strb	r2, [r3, #1]
            sysStatus.openingStarted = false;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <openDoors+0x108>)
 800072a:	2200      	movs	r2, #0
 800072c:	709a      	strb	r2, [r3, #2]
            sysStatus.doorFullyOpened = false;
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <openDoors+0x108>)
 8000730:	2200      	movs	r2, #0
 8000732:	705a      	strb	r2, [r3, #1]
        }
    }
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000020 	.word	0x20000020
 8000740:	2000010c 	.word	0x2000010c
 8000744:	2000012c 	.word	0x2000012c
 8000748:	200000fc 	.word	0x200000fc
 800074c:	08005d3c 	.word	0x08005d3c
 8000750:	08005d58 	.word	0x08005d58
 8000754:	08005d6c 	.word	0x08005d6c
 8000758:	08005d8c 	.word	0x08005d8c
 800075c:	08005d9c 	.word	0x08005d9c

08000760 <closeDoors>:

// 문 닫기 함수
void closeDoors(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    StepperMotor* doorMotor = (elevatorStatus.currentFloor == FLOOR_1) ? &stepmotot1 : &stepmotot2;
 8000766:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <closeDoors+0xa8>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d101      	bne.n	8000772 <closeDoors+0x12>
 800076e:	4b27      	ldr	r3, [pc, #156]	@ (800080c <closeDoors+0xac>)
 8000770:	e000      	b.n	8000774 <closeDoors+0x14>
 8000772:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <closeDoors+0xb0>)
 8000774:	607b      	str	r3, [r7, #4]

    if (!sysStatus.doorClosingStarted) {
 8000776:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <closeDoors+0xb4>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f083 0301 	eor.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d015      	beq.n	80007b2 <closeDoors+0x52>
        sysStatus.doorClosingStarted = true;
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <closeDoors+0xb4>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
        sysStatus.leftSensorDetected = false;
 800078c:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <closeDoors+0xb4>)
 800078e:	2200      	movs	r2, #0
 8000790:	731a      	strb	r2, [r3, #12]
        sysStatus.rightSensorDetected = false;
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <closeDoors+0xb4>)
 8000794:	2200      	movs	r2, #0
 8000796:	735a      	strb	r2, [r3, #13]
        printf("Close doors at floor %d\r\n", elevatorStatus.currentFloor);
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <closeDoors+0xa8>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	481e      	ldr	r0, [pc, #120]	@ (8000818 <closeDoors+0xb8>)
 80007a0:	f004 fbf4 	bl	8004f8c <iprintf>
        moveCursor(0, 0);
 80007a4:	2100      	movs	r1, #0
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 fba0 	bl	8000eec <moveCursor>
        lcdString("Close door       ");
 80007ac:	481b      	ldr	r0, [pc, #108]	@ (800081c <closeDoors+0xbc>)
 80007ae:	f000 fb88 	bl	8000ec2 <lcdString>
    }

    if (!sysStatus.leftSensorDetected) {
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <closeDoors+0xb4>)
 80007b4:	7b1b      	ldrb	r3, [r3, #12]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	f083 0301 	eor.w	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d003      	beq.n	80007ca <closeDoors+0x6a>
        rotateMotorContinuous(doorMotor, DIR_CCW);
 80007c2:	2101      	movs	r1, #1
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 fe39 	bl	800143c <rotateMotorContinuous>
    }

    if (sysStatus.leftSensorDetected) {
 80007ca:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <closeDoors+0xb4>)
 80007cc:	7b1b      	ldrb	r3, [r3, #12]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d015      	beq.n	8000800 <closeDoors+0xa0>
        stopMotor(doorMotor);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 fe67 	bl	80014a8 <stopMotor>
        printf("Door fully closed at floor %d\r\n", elevatorStatus.currentFloor);
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <closeDoors+0xa8>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	480f      	ldr	r0, [pc, #60]	@ (8000820 <closeDoors+0xc0>)
 80007e2:	f004 fbd3 	bl	8004f8c <iprintf>
        moveCursor(0, 0);
 80007e6:	2100      	movs	r1, #0
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fb7f 	bl	8000eec <moveCursor>
        lcdString("Door closed    ");
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <closeDoors+0xc4>)
 80007f0:	f000 fb67 	bl	8000ec2 <lcdString>
        sysStatus.doorClosingStarted = false;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <closeDoors+0xb4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
        elevatorStatus.state = IDLE;
 80007fa:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <closeDoors+0xa8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	705a      	strb	r2, [r3, #1]
    }
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000020 	.word	0x20000020
 800080c:	2000010c 	.word	0x2000010c
 8000810:	2000012c 	.word	0x2000012c
 8000814:	200000fc 	.word	0x200000fc
 8000818:	08005db8 	.word	0x08005db8
 800081c:	08005dd4 	.word	0x08005dd4
 8000820:	08005de8 	.word	0x08005de8
 8000824:	08005e08 	.word	0x08005e08

08000828 <moveElevatorTo>:

// 엘리베이터 이동 함수
void moveElevatorTo(uint8_t floor) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
    if (stepmotot3.state != MOTOR_STOPPED || (floor != FLOOR_1 && floor != FLOOR_2)) {
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <moveElevatorTo+0x94>)
 8000834:	7f9b      	ldrb	r3, [r3, #30]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d105      	bne.n	8000846 <moveElevatorTo+0x1e>
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d006      	beq.n	800084e <moveElevatorTo+0x26>
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d003      	beq.n	800084e <moveElevatorTo+0x26>
        printf("Invalid movement request\r\n");
 8000846:	481e      	ldr	r0, [pc, #120]	@ (80008c0 <moveElevatorTo+0x98>)
 8000848:	f004 fc08 	bl	800505c <puts>
        return;
 800084c:	e033      	b.n	80008b6 <moveElevatorTo+0x8e>
    }

    if (elevatorStatus.currentFloor == floor) {
 800084e:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <moveElevatorTo+0x9c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	429a      	cmp	r2, r3
 8000856:	d108      	bne.n	800086a <moveElevatorTo+0x42>
        printf("Already at floor %d\r\n", floor);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	@ (80008c8 <moveElevatorTo+0xa0>)
 800085e:	f004 fb95 	bl	8004f8c <iprintf>
        elevatorStatus.state = OPEN_DOORS;
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <moveElevatorTo+0x9c>)
 8000864:	2202      	movs	r2, #2
 8000866:	705a      	strb	r2, [r3, #1]
        return;
 8000868:	e025      	b.n	80008b6 <moveElevatorTo+0x8e>
    }

    printf("Moving to floor %d\r\n", floor);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4619      	mov	r1, r3
 800086e:	4817      	ldr	r0, [pc, #92]	@ (80008cc <moveElevatorTo+0xa4>)
 8000870:	f004 fb8c 	bl	8004f8c <iprintf>
    elevatorStatus.state = MOVING;
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <moveElevatorTo+0x9c>)
 8000876:	2201      	movs	r2, #1
 8000878:	705a      	strb	r2, [r3, #1]
    
    if (floor == FLOOR_1) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d109      	bne.n	8000894 <moveElevatorTo+0x6c>
        printf("Rotating CCW\r\n");
 8000880:	4813      	ldr	r0, [pc, #76]	@ (80008d0 <moveElevatorTo+0xa8>)
 8000882:	f004 fbeb 	bl	800505c <puts>
        rotateDegrees(&stepmotot3, 1190, DIR_CCW);
 8000886:	2201      	movs	r2, #1
 8000888:	f240 41a6 	movw	r1, #1190	@ 0x4a6
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <moveElevatorTo+0x94>)
 800088e:	f000 fdb9 	bl	8001404 <rotateDegrees>
 8000892:	e008      	b.n	80008a6 <moveElevatorTo+0x7e>
    } else {
        printf("Rotating CW\r\n");
 8000894:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <moveElevatorTo+0xac>)
 8000896:	f004 fbe1 	bl	800505c <puts>
        rotateDegrees(&stepmotot3, 1190, DIR_CW);
 800089a:	2200      	movs	r2, #0
 800089c:	f240 41a6 	movw	r1, #1190	@ 0x4a6
 80008a0:	4806      	ldr	r0, [pc, #24]	@ (80008bc <moveElevatorTo+0x94>)
 80008a2:	f000 fdaf 	bl	8001404 <rotateDegrees>
    }

    elevatorStatus.currentFloor = floor;
 80008a6:	4a07      	ldr	r2, [pc, #28]	@ (80008c4 <moveElevatorTo+0x9c>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	7013      	strb	r3, [r2, #0]
    printf("Arrived at floor %d\r\n", floor);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <moveElevatorTo+0xb0>)
 80008b2:	f004 fb6b 	bl	8004f8c <iprintf>
}
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000014c 	.word	0x2000014c
 80008c0:	08005e18 	.word	0x08005e18
 80008c4:	20000020 	.word	0x20000020
 80008c8:	08005e34 	.word	0x08005e34
 80008cc:	08005e4c 	.word	0x08005e4c
 80008d0:	08005e64 	.word	0x08005e64
 80008d4:	08005e74 	.word	0x08005e74
 80008d8:	08005e84 	.word	0x08005e84

080008dc <HandleButtonPress>:
Button extBtn1 = {GPIOC, GPIO_PIN_9, BTN_IDLE, false};
Button extBtn2 = {GPIOB, GPIO_PIN_8, BTN_IDLE, false};
Button intBtn1 = {GPIOC, GPIO_PIN_6, BTN_IDLE, false};
Button intBtn2 = {GPIOC, GPIO_PIN_5, BTN_IDLE, false};

void HandleButtonPress(Button* btn) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    uint8_t pinState = HAL_GPIO_ReadPin(btn->GPIOx, btn->GPIO_Pin);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	889b      	ldrh	r3, [r3, #4]
 80008ec:	4619      	mov	r1, r3
 80008ee:	4610      	mov	r0, r2
 80008f0:	f001 fc4c 	bl	800218c <HAL_GPIO_ReadPin>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]

    if (elevatorStatus.state == MOVING ||
 80008f8:	4b42      	ldr	r3, [pc, #264]	@ (8000a04 <HandleButtonPress+0x128>)
 80008fa:	785b      	ldrb	r3, [r3, #1]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d007      	beq.n	8000910 <HandleButtonPress+0x34>
        elevatorStatus.state == OPEN_DOORS ||
 8000900:	4b40      	ldr	r3, [pc, #256]	@ (8000a04 <HandleButtonPress+0x128>)
 8000902:	785b      	ldrb	r3, [r3, #1]
    if (elevatorStatus.state == MOVING ||
 8000904:	2b02      	cmp	r3, #2
 8000906:	d003      	beq.n	8000910 <HandleButtonPress+0x34>
        elevatorStatus.state == CLOSE_DOORS) {
 8000908:	4b3e      	ldr	r3, [pc, #248]	@ (8000a04 <HandleButtonPress+0x128>)
 800090a:	785b      	ldrb	r3, [r3, #1]
        elevatorStatus.state == OPEN_DOORS ||
 800090c:	2b03      	cmp	r3, #3
 800090e:	d103      	bne.n	8000918 <HandleButtonPress+0x3c>
        printf("Elevator is busy, button press ignored\r\n");
 8000910:	483d      	ldr	r0, [pc, #244]	@ (8000a08 <HandleButtonPress+0x12c>)
 8000912:	f004 fba3 	bl	800505c <puts>
        return;
 8000916:	e071      	b.n	80009fc <HandleButtonPress+0x120>
    }

    if (pinState == GPIO_PIN_SET && !btn->is_pressed) {
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d162      	bne.n	80009e4 <HandleButtonPress+0x108>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	79db      	ldrb	r3, [r3, #7]
 8000922:	f083 0301 	eor.w	r3, r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d05b      	beq.n	80009e4 <HandleButtonPress+0x108>
        btn->is_pressed = true;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2201      	movs	r2, #1
 8000930:	71da      	strb	r2, [r3, #7]
        printf("Button pressed\r\n");
 8000932:	4836      	ldr	r0, [pc, #216]	@ (8000a0c <HandleButtonPress+0x130>)
 8000934:	f004 fb92 	bl	800505c <puts>

        if (elevatorStatus.state == IDLE || elevatorStatus.state == OPEN_DOORS) {
 8000938:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <HandleButtonPress+0x128>)
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <HandleButtonPress+0x6c>
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <HandleButtonPress+0x128>)
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d158      	bne.n	80009fa <HandleButtonPress+0x11e>
            if ((btn == &extBtn1 || btn == &intBtn1) && elevatorStatus.currentFloor != FLOOR_1) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a31      	ldr	r2, [pc, #196]	@ (8000a10 <HandleButtonPress+0x134>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d003      	beq.n	8000958 <HandleButtonPress+0x7c>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a30      	ldr	r2, [pc, #192]	@ (8000a14 <HandleButtonPress+0x138>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d11a      	bne.n	800098e <HandleButtonPress+0xb2>
 8000958:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <HandleButtonPress+0x128>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d016      	beq.n	800098e <HandleButtonPress+0xb2>
                sysStatus.targetFloor = FLOOR_1;
 8000960:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <HandleButtonPress+0x13c>)
 8000962:	2201      	movs	r2, #1
 8000964:	739a      	strb	r2, [r3, #14]
                printf("Target floor set to 1\r\n");
 8000966:	482d      	ldr	r0, [pc, #180]	@ (8000a1c <HandleButtonPress+0x140>)
 8000968:	f004 fb78 	bl	800505c <puts>
                moveCursor(0, 0);
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fabc 	bl	8000eec <moveCursor>
                lcdString("Target floor : 1    ");
 8000974:	482a      	ldr	r0, [pc, #168]	@ (8000a20 <HandleButtonPress+0x144>)
 8000976:	f000 faa4 	bl	8000ec2 <lcdString>
                elevatorStatus.state = MOVING;
 800097a:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <HandleButtonPress+0x128>)
 800097c:	2201      	movs	r2, #1
 800097e:	705a      	strb	r2, [r3, #1]
                moveElevatorTo(sysStatus.targetFloor);
 8000980:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <HandleButtonPress+0x13c>)
 8000982:	7b9b      	ldrb	r3, [r3, #14]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff4e 	bl	8000828 <moveElevatorTo>
 800098c:	e029      	b.n	80009e2 <HandleButtonPress+0x106>
            } else if ((btn == &extBtn2 || btn == &intBtn2) && elevatorStatus.currentFloor != FLOOR_2) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a24      	ldr	r2, [pc, #144]	@ (8000a24 <HandleButtonPress+0x148>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d003      	beq.n	800099e <HandleButtonPress+0xc2>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a23      	ldr	r2, [pc, #140]	@ (8000a28 <HandleButtonPress+0x14c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d11a      	bne.n	80009d4 <HandleButtonPress+0xf8>
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <HandleButtonPress+0x128>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d016      	beq.n	80009d4 <HandleButtonPress+0xf8>
                sysStatus.targetFloor = FLOOR_2;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HandleButtonPress+0x13c>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	739a      	strb	r2, [r3, #14]
                printf("Target floor set to 2\r\n");
 80009ac:	481f      	ldr	r0, [pc, #124]	@ (8000a2c <HandleButtonPress+0x150>)
 80009ae:	f004 fb55 	bl	800505c <puts>
                moveCursor(0, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 fa99 	bl	8000eec <moveCursor>
                lcdString("Target floor : 2     ");
 80009ba:	481d      	ldr	r0, [pc, #116]	@ (8000a30 <HandleButtonPress+0x154>)
 80009bc:	f000 fa81 	bl	8000ec2 <lcdString>
                elevatorStatus.state = MOVING;
 80009c0:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <HandleButtonPress+0x128>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	705a      	strb	r2, [r3, #1]
                moveElevatorTo(sysStatus.targetFloor);
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <HandleButtonPress+0x13c>)
 80009c8:	7b9b      	ldrb	r3, [r3, #14]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff2b 	bl	8000828 <moveElevatorTo>
 80009d2:	e006      	b.n	80009e2 <HandleButtonPress+0x106>
            } else {
                printf("Opening doors on current floor\r\n");
 80009d4:	4817      	ldr	r0, [pc, #92]	@ (8000a34 <HandleButtonPress+0x158>)
 80009d6:	f004 fb41 	bl	800505c <puts>
                elevatorStatus.state = OPEN_DOORS;
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <HandleButtonPress+0x128>)
 80009dc:	2202      	movs	r2, #2
 80009de:	705a      	strb	r2, [r3, #1]
        if (elevatorStatus.state == IDLE || elevatorStatus.state == OPEN_DOORS) {
 80009e0:	e00b      	b.n	80009fa <HandleButtonPress+0x11e>
 80009e2:	e00a      	b.n	80009fa <HandleButtonPress+0x11e>
            }
        }
    } else if (pinState == GPIO_PIN_RESET && btn->is_pressed) {
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d108      	bne.n	80009fc <HandleButtonPress+0x120>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	79db      	ldrb	r3, [r3, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d004      	beq.n	80009fc <HandleButtonPress+0x120>
        btn->is_pressed = false;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	71da      	strb	r2, [r3, #7]
 80009f8:	e000      	b.n	80009fc <HandleButtonPress+0x120>
        if (elevatorStatus.state == IDLE || elevatorStatus.state == OPEN_DOORS) {
 80009fa:	bf00      	nop
    }
}
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000020 	.word	0x20000020
 8000a08:	08005e9c 	.word	0x08005e9c
 8000a0c:	08005ec4 	.word	0x08005ec4
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000010 	.word	0x20000010
 8000a18:	200000fc 	.word	0x200000fc
 8000a1c:	08005ed4 	.word	0x08005ed4
 8000a20:	08005eec 	.word	0x08005eec
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000018 	.word	0x20000018
 8000a2c:	08005f04 	.word	0x08005f04
 8000a30:	08005f1c 	.word	0x08005f1c
 8000a34:	08005f34 	.word	0x08005f34

08000a38 <delay_us>:
 *      Author: user
 */
#include "delayus.h"

void delay_us(uint32_t us)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start(&htim11);
 8000a40:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <delay_us+0x34>)
 8000a42:	f002 fd73 	bl	800352c <HAL_TIM_Base_Start>

  __HAL_TIM_SET_COUNTER(&htim11, 0);
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <delay_us+0x34>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24

  while(__HAL_TIM_GET_COUNTER(&htim11) < us);
 8000a4e:	bf00      	nop
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <delay_us+0x34>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d8f9      	bhi.n	8000a50 <delay_us+0x18>

  HAL_TIM_Base_Stop(&htim11);
 8000a5c:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <delay_us+0x34>)
 8000a5e:	f002 fdbf 	bl	80035e0 <HAL_TIM_Base_Stop>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001bc 	.word	0x200001bc

08000a70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a7b      	ldr	r2, [pc, #492]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b79      	ldr	r3, [pc, #484]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b75      	ldr	r3, [pc, #468]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a74      	ldr	r2, [pc, #464]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b72      	ldr	r3, [pc, #456]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a6d      	ldr	r2, [pc, #436]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b6b      	ldr	r3, [pc, #428]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b67      	ldr	r3, [pc, #412]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a66      	ldr	r2, [pc, #408]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b64      	ldr	r3, [pc, #400]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b60      	ldr	r3, [pc, #384]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a5f      	ldr	r2, [pc, #380]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b5d      	ldr	r3, [pc, #372]	@ (8000c7c <MX_GPIO_Init+0x20c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b12:	2200      	movs	r2, #0
 8000b14:	f641 418f 	movw	r1, #7311	@ 0x1c8f
 8000b18:	4859      	ldr	r0, [pc, #356]	@ (8000c80 <MX_GPIO_Init+0x210>)
 8000b1a:	f001 fb4f 	bl	80021bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f248 31e0 	movw	r1, #33760	@ 0x83e0
 8000b24:	4857      	ldr	r0, [pc, #348]	@ (8000c84 <MX_GPIO_Init+0x214>)
 8000b26:	f001 fb49 	bl	80021bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f24e 0142 	movw	r1, #57410	@ 0xe042
 8000b30:	4855      	ldr	r0, [pc, #340]	@ (8000c88 <MX_GPIO_Init+0x218>)
 8000b32:	f001 fb43 	bl	80021bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4854      	ldr	r0, [pc, #336]	@ (8000c8c <MX_GPIO_Init+0x21c>)
 8000b3c:	f001 fb3e 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC7 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b40:	f641 438f 	movw	r3, #7311	@ 0x1c8f
 8000b44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4849      	ldr	r0, [pc, #292]	@ (8000c80 <MX_GPIO_Init+0x210>)
 8000b5a:	f001 f993 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000b5e:	2312      	movs	r3, #18
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4844      	ldr	r0, [pc, #272]	@ (8000c84 <MX_GPIO_Init+0x214>)
 8000b74:	f001 f986 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000b78:	f248 33e0 	movw	r3, #33760	@ 0x83e0
 8000b7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	483c      	ldr	r0, [pc, #240]	@ (8000c84 <MX_GPIO_Init+0x214>)
 8000b92:	f001 f977 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9;
 8000b96:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b9c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4834      	ldr	r0, [pc, #208]	@ (8000c80 <MX_GPIO_Init+0x210>)
 8000bae:	f001 f969 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4830      	ldr	r0, [pc, #192]	@ (8000c88 <MX_GPIO_Init+0x218>)
 8000bc8:	f001 f95c 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000bcc:	f24e 0342 	movw	r3, #57410	@ 0xe042
 8000bd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4828      	ldr	r0, [pc, #160]	@ (8000c88 <MX_GPIO_Init+0x218>)
 8000be6:	f001 f94d 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bea:	2304      	movs	r3, #4
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4822      	ldr	r0, [pc, #136]	@ (8000c8c <MX_GPIO_Init+0x21c>)
 8000c02:	f001 f93f 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c0c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481a      	ldr	r0, [pc, #104]	@ (8000c88 <MX_GPIO_Init+0x218>)
 8000c1e:	f001 f931 	bl	8001e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2006      	movs	r0, #6
 8000c28:	f001 f863 	bl	8001cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c2c:	2006      	movs	r0, #6
 8000c2e:	f001 f87c 	bl	8001d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2007      	movs	r0, #7
 8000c38:	f001 f85b 	bl	8001cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c3c:	2007      	movs	r0, #7
 8000c3e:	f001 f874 	bl	8001d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2008      	movs	r0, #8
 8000c48:	f001 f853 	bl	8001cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c4c:	2008      	movs	r0, #8
 8000c4e:	f001 f86c 	bl	8001d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	200a      	movs	r0, #10
 8000c58:	f001 f84b 	bl	8001cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f001 f864 	bl	8001d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2017      	movs	r0, #23
 8000c68:	f001 f843 	bl	8001cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c6c:	2017      	movs	r0, #23
 8000c6e:	f001 f85c 	bl	8001d2a <HAL_NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	@ 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020c00 	.word	0x40020c00

08000c90 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000c96:	4a13      	ldr	r2, [pc, #76]	@ (8000ce4 <MX_I2C2_Init+0x54>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000c9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <MX_I2C2_Init+0x58>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000cae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <MX_I2C2_Init+0x50>)
 8000cce:	f001 faa7 	bl	8002220 <HAL_I2C_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cd8:	f000 faf2 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000a8 	.word	0x200000a8
 8000ce4:	40005800 	.word	0x40005800
 8000ce8:	000186a0 	.word	0x000186a0

08000cec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <HAL_I2C_MspInit+0xa4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d13c      	bne.n	8000d88 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <HAL_I2C_MspInit+0xa8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a1f      	ldr	r2, [pc, #124]	@ (8000d94 <HAL_I2C_MspInit+0xa8>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <HAL_I2C_MspInit+0xa8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d30:	2312      	movs	r3, #18
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4814      	ldr	r0, [pc, #80]	@ (8000d98 <HAL_I2C_MspInit+0xac>)
 8000d48:	f001 f89c 	bl	8001e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d50:	2312      	movs	r3, #18
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000d5c:	2309      	movs	r3, #9
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <HAL_I2C_MspInit+0xac>)
 8000d68:	f001 f88c 	bl	8001e84 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_I2C_MspInit+0xa8>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <HAL_I2C_MspInit+0xa8>)
 8000d76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_I2C_MspInit+0xa8>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	@ 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40005800 	.word	0x40005800
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020400 	.word	0x40020400

08000d9c <lcdCommand>:

extern I2C_HandleTypeDef hi2c2;


void lcdCommand(uint8_t command)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  uint8_t high_nibble, low_nibble;
  uint8_t i2c_buffer[4];
  high_nibble = command & 0xf0;
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f023 030f 	bic.w	r3, r3, #15
 8000dac:	73fb      	strb	r3, [r7, #15]
  low_nibble = (command << 4) & 0xf0;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	73bb      	strb	r3, [r7, #14]
  i2c_buffer[0] = high_nibble | 0x04 | 0x08;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f043 030c 	orr.w	r3, r3, #12
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	723b      	strb	r3, [r7, #8]
  i2c_buffer[1] = high_nibble | 0x00 | 0x08;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	727b      	strb	r3, [r7, #9]
  i2c_buffer[2] = low_nibble  | 0x04 | 0x08;
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	f043 030c 	orr.w	r3, r3, #12
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	72bb      	strb	r3, [r7, #10]
  i2c_buffer[3] = low_nibble  | 0x00 | 0x08;
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	72fb      	strb	r3, [r7, #11]
  while(HAL_I2C_Master_Transmit(&hi2c2, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK);
 8000ddc:	bf00      	nop
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	2364      	movs	r3, #100	@ 0x64
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2304      	movs	r3, #4
 8000de8:	214e      	movs	r1, #78	@ 0x4e
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <lcdCommand+0x64>)
 8000dec:	f001 fb5c 	bl	80024a8 <HAL_I2C_Master_Transmit>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f3      	bne.n	8000dde <lcdCommand+0x42>
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200000a8 	.word	0x200000a8

08000e04 <lcdData>:

// 1byte write
void lcdData(uint8_t data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t high_nibble, low_nibble;
  uint8_t i2c_buffer[4];
  high_nibble = data & 0xf0;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f023 030f 	bic.w	r3, r3, #15
 8000e14:	73fb      	strb	r3, [r7, #15]
  low_nibble = (data << 4) & 0xf0;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	73bb      	strb	r3, [r7, #14]
  i2c_buffer[0] = high_nibble | 0x05 | 0x08;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	f043 030d 	orr.w	r3, r3, #13
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	723b      	strb	r3, [r7, #8]
  i2c_buffer[1] = high_nibble | 0x01 | 0x08;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f043 0309 	orr.w	r3, r3, #9
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	727b      	strb	r3, [r7, #9]
  i2c_buffer[2] = low_nibble  | 0x05 | 0x08;
 8000e30:	7bbb      	ldrb	r3, [r7, #14]
 8000e32:	f043 030d 	orr.w	r3, r3, #13
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	72bb      	strb	r3, [r7, #10]
  i2c_buffer[3] = low_nibble  | 0x01 | 0x08;
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	f043 0309 	orr.w	r3, r3, #9
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	72fb      	strb	r3, [r7, #11]
  while(HAL_I2C_Master_Transmit(&hi2c2, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK);
 8000e44:	bf00      	nop
 8000e46:	f107 0208 	add.w	r2, r7, #8
 8000e4a:	2364      	movs	r3, #100	@ 0x64
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2304      	movs	r3, #4
 8000e50:	214e      	movs	r1, #78	@ 0x4e
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <lcdData+0x64>)
 8000e54:	f001 fb28 	bl	80024a8 <HAL_I2C_Master_Transmit>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f3      	bne.n	8000e46 <lcdData+0x42>
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200000a8 	.word	0x200000a8

08000e6c <lcdInit>:

void lcdInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8000e70:	2032      	movs	r0, #50	@ 0x32
 8000e72:	f000 fe3f 	bl	8001af4 <HAL_Delay>
  lcdCommand(0x33);
 8000e76:	2033      	movs	r0, #51	@ 0x33
 8000e78:	f7ff ff90 	bl	8000d9c <lcdCommand>
  HAL_Delay(5);
 8000e7c:	2005      	movs	r0, #5
 8000e7e:	f000 fe39 	bl	8001af4 <HAL_Delay>
  lcdCommand(0x32);
 8000e82:	2032      	movs	r0, #50	@ 0x32
 8000e84:	f7ff ff8a 	bl	8000d9c <lcdCommand>
  HAL_Delay(5);
 8000e88:	2005      	movs	r0, #5
 8000e8a:	f000 fe33 	bl	8001af4 <HAL_Delay>
  lcdCommand(0x28);
 8000e8e:	2028      	movs	r0, #40	@ 0x28
 8000e90:	f7ff ff84 	bl	8000d9c <lcdCommand>
  HAL_Delay(5);
 8000e94:	2005      	movs	r0, #5
 8000e96:	f000 fe2d 	bl	8001af4 <HAL_Delay>
  lcdCommand(DISPLAY_ON);
 8000e9a:	200c      	movs	r0, #12
 8000e9c:	f7ff ff7e 	bl	8000d9c <lcdCommand>
  HAL_Delay(5);
 8000ea0:	2005      	movs	r0, #5
 8000ea2:	f000 fe27 	bl	8001af4 <HAL_Delay>
  lcdCommand(0x06);
 8000ea6:	2006      	movs	r0, #6
 8000ea8:	f7ff ff78 	bl	8000d9c <lcdCommand>
  HAL_Delay(5);
 8000eac:	2005      	movs	r0, #5
 8000eae:	f000 fe21 	bl	8001af4 <HAL_Delay>
  lcdCommand(CLEAR_DISPLAY);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff ff72 	bl	8000d9c <lcdCommand>
  HAL_Delay(2);
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 fe1b 	bl	8001af4 <HAL_Delay>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <lcdString>:

void lcdString(char *str)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  while(*str)lcdData(*str++);
 8000eca:	e006      	b.n	8000eda <lcdString+0x18>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff95 	bl	8000e04 <lcdData>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f4      	bne.n	8000ecc <lcdString+0xa>
}
 8000ee2:	bf00      	nop
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <moveCursor>:

void moveCursor(uint8_t row, uint8_t col)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	71bb      	strb	r3, [r7, #6]
  lcdCommand(0x80 | row<<6 | col);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	019b      	lsls	r3, r3, #6
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff44 	bl	8000d9c <lcdCommand>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char*p , int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)p , len , 10);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <_write+0x24>)
 8000f32:	f002 ffb7 	bl	8003ea4 <HAL_UART_Transmit>
  return len;
 8000f36:	687b      	ldr	r3, [r7, #4]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000204 	.word	0x20000204

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fd61 	bl	8001a10 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f879 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f7ff fd8d 	bl	8000a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 fcb7 	bl	80018c8 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000f5a:	f000 fc53 	bl	8001804 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000f5e:	f000 fc03 	bl	8001768 <MX_TIM3_Init>
  MX_I2C2_Init();
 8000f62:	f7ff fe95 	bl	8000c90 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcdInit();
 8000f66:	f7ff ff81 	bl	8000e6c <lcdInit>
  initMotor(&stepmotot1, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_2, GPIOC, GPIO_PIN_3);
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	9304      	str	r3, [sp, #16]
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <main+0xdc>)
 8000f70:	9303      	str	r3, [sp, #12]
 8000f72:	2304      	movs	r3, #4
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	4b2a      	ldr	r3, [pc, #168]	@ (8001020 <main+0xdc>)
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <main+0xdc>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	4927      	ldr	r1, [pc, #156]	@ (8001020 <main+0xdc>)
 8000f84:	4827      	ldr	r0, [pc, #156]	@ (8001024 <main+0xe0>)
 8000f86:	f000 f9a1 	bl	80012cc <initMotor>
  initMotor(&stepmotot2, GPIOC, GPIO_PIN_11, GPIOD, GPIO_PIN_2, GPIOC, GPIO_PIN_12, GPIOA, GPIO_PIN_15);
 8000f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8e:	9304      	str	r3, [sp, #16]
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <main+0xe4>)
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <main+0xdc>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <main+0xe8>)
 8000fa4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fa8:	491d      	ldr	r1, [pc, #116]	@ (8001020 <main+0xdc>)
 8000faa:	4821      	ldr	r0, [pc, #132]	@ (8001030 <main+0xec>)
 8000fac:	f000 f98e 	bl	80012cc <initMotor>
  initMotor(&stepmotot3, GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_15, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_13);
 8000fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb4:	9304      	str	r3, [sp, #16]
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <main+0xf0>)
 8000fb8:	9303      	str	r3, [sp, #12]
 8000fba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <main+0xf0>)
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <main+0xf0>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4919      	ldr	r1, [pc, #100]	@ (8001034 <main+0xf0>)
 8000fd0:	4819      	ldr	r0, [pc, #100]	@ (8001038 <main+0xf4>)
 8000fd2:	f000 f97b 	bl	80012cc <initMotor>


  HAL_TIM_Base_Start_IT(&htim3);
 8000fd6:	4819      	ldr	r0, [pc, #100]	@ (800103c <main+0xf8>)
 8000fd8:	f002 fb2a 	bl	8003630 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
        switch (elevatorStatus.state) {
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <main+0xfc>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d819      	bhi.n	8001018 <main+0xd4>
 8000fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fec <main+0xa8>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08001019 	.word	0x08001019
 8000ff0:	08000ffd 	.word	0x08000ffd
 8000ff4:	0800100d 	.word	0x0800100d
 8000ff8:	08001013 	.word	0x08001013
          case IDLE:
            break;

          case MOVING:
            // 엘리베이터가 목표 층에 도달하면 문을 열도록 상태 변경
            if (stepmotot1.state == MOTOR_STOPPED)
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <main+0xe0>)
 8000ffe:	7f9b      	ldrb	r3, [r3, #30]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10b      	bne.n	800101c <main+0xd8>
            {
              elevatorStatus.state = OPEN_DOORS;  // 이동 완료 후 문 열기 상태로 변경
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <main+0xfc>)
 8001006:	2202      	movs	r2, #2
 8001008:	705a      	strb	r2, [r3, #1]
            }
            break;
 800100a:	e007      	b.n	800101c <main+0xd8>
          case OPEN_DOORS:
            openDoors();
 800100c:	f7ff fb18 	bl	8000640 <openDoors>
            break;
 8001010:	e005      	b.n	800101e <main+0xda>
          case CLOSE_DOORS:
            closeDoors();
 8001012:	f7ff fba5 	bl	8000760 <closeDoors>
            break;
 8001016:	e002      	b.n	800101e <main+0xda>

          default:
            break;
 8001018:	bf00      	nop
 800101a:	e7df      	b.n	8000fdc <main+0x98>
            break;
 800101c:	bf00      	nop
        switch (elevatorStatus.state) {
 800101e:	e7dd      	b.n	8000fdc <main+0x98>
 8001020:	40020800 	.word	0x40020800
 8001024:	2000010c 	.word	0x2000010c
 8001028:	40020000 	.word	0x40020000
 800102c:	40020c00 	.word	0x40020c00
 8001030:	2000012c 	.word	0x2000012c
 8001034:	40020400 	.word	0x40020400
 8001038:	2000014c 	.word	0x2000014c
 800103c:	20000174 	.word	0x20000174
 8001040:	20000020 	.word	0x20000020

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 f8e2 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <SystemClock_Config+0xc8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a26      	ldr	r2, [pc, #152]	@ (800110c <SystemClock_Config+0xc8>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b24      	ldr	r3, [pc, #144]	@ (800110c <SystemClock_Config+0xc8>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <SystemClock_Config+0xcc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <SystemClock_Config+0xcc>)
 800108e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <SystemClock_Config+0xcc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b4:	2304      	movs	r3, #4
 80010b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010bc:	2302      	movs	r3, #2
 80010be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fd47 	bl	8002b5c <HAL_RCC_OscConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d4:	f000 f8f4 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d8:	230f      	movs	r3, #15
 80010da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2103      	movs	r1, #3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 ffa9 	bl	800304c <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001100:	f000 f8de 	bl	80012c0 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3750      	adds	r7, #80	@ 0x50
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin) {
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001124:	d057      	beq.n	80011d6 <HAL_GPIO_EXTI_Callback+0xc2>
 8001126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800112a:	f300 808b 	bgt.w	8001244 <HAL_GPIO_EXTI_Callback+0x130>
 800112e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001132:	d054      	beq.n	80011de <HAL_GPIO_EXTI_Callback+0xca>
 8001134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001138:	f300 8084 	bgt.w	8001244 <HAL_GPIO_EXTI_Callback+0x130>
 800113c:	2b20      	cmp	r3, #32
 800113e:	dc47      	bgt.n	80011d0 <HAL_GPIO_EXTI_Callback+0xbc>
 8001140:	2b00      	cmp	r3, #0
 8001142:	dd7f      	ble.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
 8001144:	3b01      	subs	r3, #1
 8001146:	2b1f      	cmp	r3, #31
 8001148:	d87c      	bhi.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
 800114a:	a201      	add	r2, pc, #4	@ (adr r2, 8001150 <HAL_GPIO_EXTI_Callback+0x3c>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	08001217 	.word	0x08001217
 8001154:	080011f7 	.word	0x080011f7
 8001158:	08001245 	.word	0x08001245
 800115c:	08001227 	.word	0x08001227
 8001160:	08001245 	.word	0x08001245
 8001164:	08001245 	.word	0x08001245
 8001168:	08001245 	.word	0x08001245
 800116c:	08001245 	.word	0x08001245
 8001170:	08001245 	.word	0x08001245
 8001174:	08001245 	.word	0x08001245
 8001178:	08001245 	.word	0x08001245
 800117c:	08001245 	.word	0x08001245
 8001180:	08001245 	.word	0x08001245
 8001184:	08001245 	.word	0x08001245
 8001188:	08001245 	.word	0x08001245
 800118c:	08001207 	.word	0x08001207
 8001190:	08001245 	.word	0x08001245
 8001194:	08001245 	.word	0x08001245
 8001198:	08001245 	.word	0x08001245
 800119c:	08001245 	.word	0x08001245
 80011a0:	08001245 	.word	0x08001245
 80011a4:	08001245 	.word	0x08001245
 80011a8:	08001245 	.word	0x08001245
 80011ac:	08001245 	.word	0x08001245
 80011b0:	08001245 	.word	0x08001245
 80011b4:	08001245 	.word	0x08001245
 80011b8:	08001245 	.word	0x08001245
 80011bc:	08001245 	.word	0x08001245
 80011c0:	08001245 	.word	0x08001245
 80011c4:	08001245 	.word	0x08001245
 80011c8:	08001245 	.word	0x08001245
 80011cc:	080011ef 	.word	0x080011ef
 80011d0:	2b40      	cmp	r3, #64	@ 0x40
 80011d2:	d008      	beq.n	80011e6 <HAL_GPIO_EXTI_Callback+0xd2>
            if (elevatorStatus.currentFloor == FLOOR_2) {
                sysStatus.rightSensorDetected = true;
            }
            break;
    }
}
 80011d4:	e036      	b.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
            HandleButtonPress(&extBtn1);
 80011d6:	481d      	ldr	r0, [pc, #116]	@ (800124c <HAL_GPIO_EXTI_Callback+0x138>)
 80011d8:	f7ff fb80 	bl	80008dc <HandleButtonPress>
            break;
 80011dc:	e032      	b.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
            HandleButtonPress(&extBtn2);
 80011de:	481c      	ldr	r0, [pc, #112]	@ (8001250 <HAL_GPIO_EXTI_Callback+0x13c>)
 80011e0:	f7ff fb7c 	bl	80008dc <HandleButtonPress>
            break;
 80011e4:	e02e      	b.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
            HandleButtonPress(&intBtn1);
 80011e6:	481b      	ldr	r0, [pc, #108]	@ (8001254 <HAL_GPIO_EXTI_Callback+0x140>)
 80011e8:	f7ff fb78 	bl	80008dc <HandleButtonPress>
            break;
 80011ec:	e02a      	b.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
            HandleButtonPress(&intBtn2);
 80011ee:	481a      	ldr	r0, [pc, #104]	@ (8001258 <HAL_GPIO_EXTI_Callback+0x144>)
 80011f0:	f7ff fb74 	bl	80008dc <HandleButtonPress>
            break;
 80011f4:	e026      	b.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
            if (elevatorStatus.currentFloor == FLOOR_1) {
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_GPIO_EXTI_Callback+0x148>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d11b      	bne.n	8001236 <HAL_GPIO_EXTI_Callback+0x122>
                sysStatus.leftSensorDetected = true;
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001200:	2201      	movs	r2, #1
 8001202:	731a      	strb	r2, [r3, #12]
            break;
 8001204:	e017      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x122>
            if (elevatorStatus.currentFloor == FLOOR_1) {
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_GPIO_EXTI_Callback+0x148>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d115      	bne.n	800123a <HAL_GPIO_EXTI_Callback+0x126>
                sysStatus.rightSensorDetected = true;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001210:	2201      	movs	r2, #1
 8001212:	735a      	strb	r2, [r3, #13]
            break;
 8001214:	e011      	b.n	800123a <HAL_GPIO_EXTI_Callback+0x126>
            if (elevatorStatus.currentFloor == FLOOR_2) {
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_GPIO_EXTI_Callback+0x148>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d10f      	bne.n	800123e <HAL_GPIO_EXTI_Callback+0x12a>
                sysStatus.leftSensorDetected = true;
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001220:	2201      	movs	r2, #1
 8001222:	731a      	strb	r2, [r3, #12]
            break;
 8001224:	e00b      	b.n	800123e <HAL_GPIO_EXTI_Callback+0x12a>
            if (elevatorStatus.currentFloor == FLOOR_2) {
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_GPIO_EXTI_Callback+0x148>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d109      	bne.n	8001242 <HAL_GPIO_EXTI_Callback+0x12e>
                sysStatus.rightSensorDetected = true;
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001230:	2201      	movs	r2, #1
 8001232:	735a      	strb	r2, [r3, #13]
            break;
 8001234:	e005      	b.n	8001242 <HAL_GPIO_EXTI_Callback+0x12e>
            break;
 8001236:	bf00      	nop
 8001238:	e004      	b.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
            break;
 800123a:	bf00      	nop
 800123c:	e002      	b.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
            break;
 800123e:	bf00      	nop
 8001240:	e000      	b.n	8001244 <HAL_GPIO_EXTI_Callback+0x130>
            break;
 8001242:	bf00      	nop
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000000 	.word	0x20000000
 8001250:	20000008 	.word	0x20000008
 8001254:	20000010 	.word	0x20000010
 8001258:	20000018 	.word	0x20000018
 800125c:	20000020 	.word	0x20000020
 8001260:	200000fc 	.word	0x200000fc

08001264 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d119      	bne.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x46>
    if(stepmotot1.state == MOTOR_STOPPED)
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001278:	7f9b      	ldrb	r3, [r3, #30]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d110      	bne.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
      switch(elevatorStatus.currentFloor)
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d002      	beq.n	800128c <HAL_TIM_PeriodElapsedCallback+0x28>
 8001286:	2b02      	cmp	r3, #2
 8001288:	d005      	beq.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x32>
 800128a:	e009      	b.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x3c>
      {
        case FLOOR_1:
          clearDisplay();
 800128c:	f7ff f970 	bl	8000570 <clearDisplay>
          display_1();
 8001290:	f7ff f99e 	bl	80005d0 <display_1>

          break;
 8001294:	e004      	b.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x3c>
        case FLOOR_2:
          clearDisplay();
 8001296:	f7ff f96b 	bl	8000570 <clearDisplay>
          display_2();
 800129a:	f7ff f9ad 	bl	80005f8 <display_2>

          break;
 800129e:	bf00      	nop
      }
    }

    __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE); // 인터럽트 플래그 클리어
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f06f 0201 	mvn.w	r2, #1
 80012a8:	611a      	str	r2, [r3, #16]
  }
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40000400 	.word	0x40000400
 80012b8:	2000010c 	.word	0x2000010c
 80012bc:	20000020 	.word	0x20000020

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <Error_Handler+0x8>

080012cc <initMotor>:
void initMotor(StepperMotor* motor,
               GPIO_TypeDef* in1_port, uint16_t in1_pin,
               GPIO_TypeDef* in2_port, uint16_t in2_pin,
               GPIO_TypeDef* in3_port, uint16_t in3_pin,
               GPIO_TypeDef* in4_port, uint16_t in4_pin)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	80fb      	strh	r3, [r7, #6]
    motor->in1_port = in1_port;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	601a      	str	r2, [r3, #0]
    motor->in1_pin = in1_pin;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	809a      	strh	r2, [r3, #4]
    motor->in2_port = in2_port;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	609a      	str	r2, [r3, #8]
    motor->in2_pin = in2_pin;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8b3a      	ldrh	r2, [r7, #24]
 80012f2:	819a      	strh	r2, [r3, #12]
    motor->in3_port = in3_port;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	611a      	str	r2, [r3, #16]
    motor->in3_pin = in3_pin;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8c3a      	ldrh	r2, [r7, #32]
 80012fe:	829a      	strh	r2, [r3, #20]
    motor->in4_port = in4_port;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001304:	619a      	str	r2, [r3, #24]
    motor->in4_pin = in4_pin;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800130a:	839a      	strh	r2, [r3, #28]
    motor->state = MOTOR_STOPPED;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2200      	movs	r2, #0
 8001310:	779a      	strb	r2, [r3, #30]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <stepMotor>:

void stepMotor(StepperMotor* motor, uint8_t step)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->in1_port, motor->in1_pin, HALF_STEP_SEQ[step][0]);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	8899      	ldrh	r1, [r3, #4]
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <stepMotor+0x74>)
 8001338:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800133c:	461a      	mov	r2, r3
 800133e:	f000 ff3d 	bl	80021bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->in2_port, motor->in2_pin, HALF_STEP_SEQ[step][1]);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6898      	ldr	r0, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	8999      	ldrh	r1, [r3, #12]
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <stepMotor+0x74>)
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	785b      	ldrb	r3, [r3, #1]
 8001354:	461a      	mov	r2, r3
 8001356:	f000 ff31 	bl	80021bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->in3_port, motor->in3_pin, HALF_STEP_SEQ[step][2]);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6918      	ldr	r0, [r3, #16]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8a99      	ldrh	r1, [r3, #20]
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <stepMotor+0x74>)
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	461a      	mov	r2, r3
 800136e:	f000 ff25 	bl	80021bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->in4_port, motor->in4_pin, HALF_STEP_SEQ[step][3]);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6998      	ldr	r0, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	8b99      	ldrh	r1, [r3, #28]
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <stepMotor+0x74>)
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	78db      	ldrb	r3, [r3, #3]
 8001384:	461a      	mov	r2, r3
 8001386:	f000 ff19 	bl	80021bc <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	08005f54 	.word	0x08005f54

08001398 <rotateSteps>:

void rotateSteps(StepperMotor* motor, uint16_t steps, uint8_t direction)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
    motor->state = MOTOR_RUNNING;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	779a      	strb	r2, [r3, #30]
    
    for(uint16_t i = 0; i < steps; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	81fb      	strh	r3, [r7, #14]
 80013b2:	e01b      	b.n	80013ec <rotateSteps+0x54>
    {
        uint8_t step;
        if(direction == DIR_CW)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <rotateSteps+0x2e>
        {
            step = i % 8;
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	737b      	strb	r3, [r7, #13]
 80013c4:	e006      	b.n	80013d4 <rotateSteps+0x3c>
        }
        else
        {
            step = 7 - (i % 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	737b      	strb	r3, [r7, #13]
        }
        stepMotor(motor, step);
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
 80013d6:	4619      	mov	r1, r3
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ffa1 	bl	8001320 <stepMotor>
        delay_us(1000);
 80013de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e2:	f7ff fb29 	bl	8000a38 <delay_us>
    for(uint16_t i = 0; i < steps; i++)
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	3301      	adds	r3, #1
 80013ea:	81fb      	strh	r3, [r7, #14]
 80013ec:	89fa      	ldrh	r2, [r7, #14]
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3df      	bcc.n	80013b4 <rotateSteps+0x1c>
    }
    
    motor->state = MOTOR_STOPPED;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	779a      	strb	r2, [r3, #30]
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <rotateDegrees>:

void rotateDegrees(StepperMotor* motor, uint16_t degrees, uint8_t direction)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
    uint16_t steps = (uint16_t)((uint32_t)degrees * STEP_PER_RESOLUTION / 360);
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	031b      	lsls	r3, r3, #12
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <rotateDegrees+0x34>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	81fb      	strh	r3, [r7, #14]
    rotateSteps(motor, steps, direction);
 8001424:	787a      	ldrb	r2, [r7, #1]
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	4619      	mov	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffb4 	bl	8001398 <rotateSteps>
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	16c16c17 	.word	0x16c16c17

0800143c <rotateMotorContinuous>:

void rotateMotorContinuous(StepperMotor* motor, uint8_t direction) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
    motor->state = MOTOR_RUNNING;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	779a      	strb	r2, [r3, #30]
    static uint8_t currentStep = 0;
    
    if(direction == DIR_CW) {
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10d      	bne.n	8001470 <rotateMotorContinuous+0x34>
        currentStep = (currentStep + 1) % 8;
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <rotateMotorContinuous+0x68>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	425a      	negs	r2, r3
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	f002 0207 	and.w	r2, r2, #7
 8001464:	bf58      	it	pl
 8001466:	4253      	negpl	r3, r2
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <rotateMotorContinuous+0x68>)
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e00b      	b.n	8001488 <rotateMotorContinuous+0x4c>
    } else {
        currentStep = (currentStep > 0) ? (currentStep - 1) : 7;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <rotateMotorContinuous+0x68>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <rotateMotorContinuous+0x46>
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <rotateMotorContinuous+0x68>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	e000      	b.n	8001484 <rotateMotorContinuous+0x48>
 8001482:	2307      	movs	r3, #7
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <rotateMotorContinuous+0x68>)
 8001486:	7013      	strb	r3, [r2, #0]
    }
    
    stepMotor(motor, currentStep);
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <rotateMotorContinuous+0x68>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff46 	bl	8001320 <stepMotor>
    delay_us(1000);  // 속도 조절을 위한 딜레이
 8001494:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001498:	f7ff face 	bl	8000a38 <delay_us>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000016c 	.word	0x2000016c

080014a8 <stopMotor>:

void stopMotor(StepperMotor* motor) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->in1_port, motor->in1_pin, GPIO_PIN_RESET);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	889b      	ldrh	r3, [r3, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	f000 fe7e 	bl	80021bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->in2_port, motor->in2_pin, GPIO_PIN_RESET);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6898      	ldr	r0, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	899b      	ldrh	r3, [r3, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	f000 fe76 	bl	80021bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->in3_port, motor->in3_pin, GPIO_PIN_RESET);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6918      	ldr	r0, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	8a9b      	ldrh	r3, [r3, #20]
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	f000 fe6e 	bl	80021bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->in4_port, motor->in4_pin, GPIO_PIN_RESET);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6998      	ldr	r0, [r3, #24]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	8b9b      	ldrh	r3, [r3, #28]
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	f000 fe66 	bl	80021bc <HAL_GPIO_WritePin>
    motor->state = MOTOR_STOPPED;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	779a      	strb	r2, [r3, #30]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	4a0f      	ldr	r2, [pc, #60]	@ (800154c <HAL_MspInit+0x4c>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	6453      	str	r3, [r2, #68]	@ 0x44
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	@ (800154c <HAL_MspInit+0x4c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN MspInit 1 */



  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <NMI_Handler+0x4>

08001558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <MemManage_Handler+0x4>

08001568 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <UsageFault_Handler+0x4>

08001578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a6:	f000 fa85 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}

080015ae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 fe1c 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f000 fe15 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}

080015ca <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80015ce:	2004      	movs	r0, #4
 80015d0:	f000 fe0e 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80015dc:	2010      	movs	r0, #16
 80015de:	f000 fe07 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80015ea:	2020      	movs	r0, #32
 80015ec:	f000 fe00 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80015f0:	2040      	movs	r0, #64	@ 0x40
 80015f2:	f000 fdfd 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80015f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015fa:	f000 fdf9 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80015fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001602:	f000 fdf5 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001610:	4802      	ldr	r0, [pc, #8]	@ (800161c <TIM3_IRQHandler+0x10>)
 8001612:	f002 f86f 	bl	80036f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000174 	.word	0x20000174

08001620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <USART2_IRQHandler+0x10>)
 8001626:	f002 fcc9 	bl	8003fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000204 	.word	0x20000204

08001634 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e00a      	b.n	800165c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001646:	f3af 8000 	nop.w
 800164a:	4601      	mov	r1, r0
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	b2ca      	uxtb	r2, r1
 8001654:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf0      	blt.n	8001646 <_read+0x12>
  }

  return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_close>:
  }
  return len;
}

int _close(int file)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001696:	605a      	str	r2, [r3, #4]
  return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_isatty>:

int _isatty(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	@ (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	@ (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	@ (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f003 fdd6 	bl	80052b8 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	@ (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	@ (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20020000 	.word	0x20020000
 8001738:	00000400 	.word	0x00000400
 800173c:	20000170 	.word	0x20000170
 8001740:	200003a0 	.word	0x200003a0

08001744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <SystemInit+0x20>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <SystemInit+0x20>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	463b      	mov	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001784:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <MX_TIM3_Init+0x94>)
 8001786:	4a1e      	ldr	r2, [pc, #120]	@ (8001800 <MX_TIM3_Init+0x98>)
 8001788:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_TIM3_Init+0x94>)
 800178c:	2263      	movs	r2, #99	@ 0x63
 800178e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_TIM3_Init+0x94>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_TIM3_Init+0x94>)
 8001798:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800179c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017aa:	4814      	ldr	r0, [pc, #80]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017ac:	f001 fe6e 	bl	800348c <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80017b6:	f7ff fd83 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4619      	mov	r1, r3
 80017c6:	480d      	ldr	r0, [pc, #52]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017c8:	f002 f884 	bl	80038d4 <HAL_TIM_ConfigClockSource>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f7ff fd75 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017de:	463b      	mov	r3, r7
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017e4:	f002 fa8c 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017ee:	f7ff fd67 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000174 	.word	0x20000174
 8001800:	40000400 	.word	0x40000400

08001804 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <MX_TIM11_Init+0x40>)
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <MX_TIM11_Init+0x44>)
 800180c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800180e:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <MX_TIM11_Init+0x40>)
 8001810:	2263      	movs	r2, #99	@ 0x63
 8001812:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <MX_TIM11_Init+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <MX_TIM11_Init+0x40>)
 800181c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001820:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <MX_TIM11_Init+0x40>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_TIM11_Init+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_TIM11_Init+0x40>)
 8001830:	f001 fe2c 	bl	800348c <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800183a:	f7ff fd41 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001bc 	.word	0x200001bc
 8001848:	40014800 	.word	0x40014800

0800184c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <HAL_TIM_Base_MspInit+0x70>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d116      	bne.n	800188c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_TIM_Base_MspInit+0x74>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	4a16      	ldr	r2, [pc, #88]	@ (80018c0 <HAL_TIM_Base_MspInit+0x74>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6413      	str	r3, [r2, #64]	@ 0x40
 800186e:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <HAL_TIM_Base_MspInit+0x74>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	201d      	movs	r0, #29
 8001880:	f000 fa37 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001884:	201d      	movs	r0, #29
 8001886:	f000 fa50 	bl	8001d2a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800188a:	e012      	b.n	80018b2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <HAL_TIM_Base_MspInit+0x78>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10d      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_TIM_Base_MspInit+0x74>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <HAL_TIM_Base_MspInit+0x74>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_TIM_Base_MspInit+0x74>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40000400 	.word	0x40000400
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40014800 	.word	0x40014800

080018c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_USART2_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 8001900:	f002 fa80 	bl	8003e04 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f7ff fcd9 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000204 	.word	0x20000204
 8001918:	40004400 	.word	0x40004400

0800191c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <HAL_UART_MspInit+0x94>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d133      	bne.n	80019a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001976:	230c      	movs	r3, #12
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001986:	2307      	movs	r3, #7
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4809      	ldr	r0, [pc, #36]	@ (80019b8 <HAL_UART_MspInit+0x9c>)
 8001992:	f000 fa77 	bl	8001e84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2026      	movs	r0, #38	@ 0x26
 800199c:	f000 f9a9 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019a0:	2026      	movs	r0, #38	@ 0x26
 80019a2:	f000 f9c2 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	@ 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40004400 	.word	0x40004400
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c0:	f7ff fec0 	bl	8001744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	@ (80019fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f003 fc6b 	bl	80052c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff faa9 	bl	8000f44 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001a00:	08005fd0 	.word	0x08005fd0
  ldr r2, =_sbss
 8001a04:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001a08:	2000039c 	.word	0x2000039c

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_Init+0x40>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_Init+0x40>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x40>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f94f 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fd5c 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f967 	bl	8001d46 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f92f 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000024 	.word	0x20000024
 8001aac:	2000002c 	.word	0x2000002c
 8001ab0:	20000028 	.word	0x20000028

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	2000002c 	.word	0x2000002c
 8001ad8:	2000024c 	.word	0x2000024c

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	2000024c 	.word	0x2000024c

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000002c 	.word	0x2000002c

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	@ (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	@ (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff29 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff3e 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff8e 	bl	8001c30 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5d 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff31 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff feb6 	bl	8001adc <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d008      	beq.n	8001d90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e052      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0216 	bic.w	r2, r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <HAL_DMA_Abort+0x62>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0208 	bic.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	e013      	b.n	8001e0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de2:	f7ff fe7b 	bl	8001adc <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d90c      	bls.n	8001e0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e015      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e4      	bne.n	8001de2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	223f      	movs	r2, #63	@ 0x3f
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2280      	movs	r2, #128	@ 0x80
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00c      	b.n	8001e76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2205      	movs	r2, #5
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e159      	b.n	8002154 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8148 	bne.w	800214e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a2 	beq.w	800214e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b57      	ldr	r3, [pc, #348]	@ (800216c <HAL_GPIO_Init+0x2e8>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	4a56      	ldr	r2, [pc, #344]	@ (800216c <HAL_GPIO_Init+0x2e8>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002018:	6453      	str	r3, [r2, #68]	@ 0x44
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HAL_GPIO_Init+0x2e8>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a52      	ldr	r2, [pc, #328]	@ (8002170 <HAL_GPIO_Init+0x2ec>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a49      	ldr	r2, [pc, #292]	@ (8002174 <HAL_GPIO_Init+0x2f0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x202>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a48      	ldr	r2, [pc, #288]	@ (8002178 <HAL_GPIO_Init+0x2f4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x1fe>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a47      	ldr	r2, [pc, #284]	@ (800217c <HAL_GPIO_Init+0x2f8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x1fa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a46      	ldr	r2, [pc, #280]	@ (8002180 <HAL_GPIO_Init+0x2fc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x1f6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a45      	ldr	r2, [pc, #276]	@ (8002184 <HAL_GPIO_Init+0x300>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x1f2>
 8002072:	2304      	movs	r3, #4
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002076:	2307      	movs	r3, #7
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x204>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x204>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002086:	2300      	movs	r3, #0
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002098:	4935      	ldr	r1, [pc, #212]	@ (8002170 <HAL_GPIO_Init+0x2ec>)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a6:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f4:	4a24      	ldr	r2, [pc, #144]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020fa:	4b23      	ldr	r3, [pc, #140]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800211e:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <HAL_GPIO_Init+0x304>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_GPIO_Init+0x304>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002148:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <HAL_GPIO_Init+0x304>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	f67f aea2 	bls.w	8001ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40013800 	.word	0x40013800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020800 	.word	0x40020800
 8002180:	40020c00 	.word	0x40020c00
 8002184:	40021000 	.word	0x40021000
 8002188:	40013c00 	.word	0x40013c00

0800218c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e001      	b.n	80021ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
 80021c8:	4613      	mov	r3, r2
 80021ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021cc:	787b      	ldrb	r3, [r7, #1]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d8:	e003      	b.n	80021e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe ff80 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e12b      	b.n	800248a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fd50 	bl	8000cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2224      	movs	r2, #36	@ 0x24
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002272:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002282:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002284:	f001 f8da 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8002288:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4a81      	ldr	r2, [pc, #516]	@ (8002494 <HAL_I2C_Init+0x274>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d807      	bhi.n	80022a4 <HAL_I2C_Init+0x84>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a80      	ldr	r2, [pc, #512]	@ (8002498 <HAL_I2C_Init+0x278>)
 8002298:	4293      	cmp	r3, r2
 800229a:	bf94      	ite	ls
 800229c:	2301      	movls	r3, #1
 800229e:	2300      	movhi	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e006      	b.n	80022b2 <HAL_I2C_Init+0x92>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a7d      	ldr	r2, [pc, #500]	@ (800249c <HAL_I2C_Init+0x27c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bf94      	ite	ls
 80022ac:	2301      	movls	r3, #1
 80022ae:	2300      	movhi	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e0e7      	b.n	800248a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4a78      	ldr	r2, [pc, #480]	@ (80024a0 <HAL_I2C_Init+0x280>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0c9b      	lsrs	r3, r3, #18
 80022c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002494 <HAL_I2C_Init+0x274>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d802      	bhi.n	80022f4 <HAL_I2C_Init+0xd4>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3301      	adds	r3, #1
 80022f2:	e009      	b.n	8002308 <HAL_I2C_Init+0xe8>
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	4a69      	ldr	r2, [pc, #420]	@ (80024a4 <HAL_I2C_Init+0x284>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	3301      	adds	r3, #1
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	430b      	orrs	r3, r1
 800230e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800231a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	495c      	ldr	r1, [pc, #368]	@ (8002494 <HAL_I2C_Init+0x274>)
 8002324:	428b      	cmp	r3, r1
 8002326:	d819      	bhi.n	800235c <HAL_I2C_Init+0x13c>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1e59      	subs	r1, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fbb1 f3f3 	udiv	r3, r1, r3
 8002336:	1c59      	adds	r1, r3, #1
 8002338:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800233c:	400b      	ands	r3, r1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_I2C_Init+0x138>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e59      	subs	r1, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002356:	e051      	b.n	80023fc <HAL_I2C_Init+0x1dc>
 8002358:	2304      	movs	r3, #4
 800235a:	e04f      	b.n	80023fc <HAL_I2C_Init+0x1dc>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d111      	bne.n	8002388 <HAL_I2C_Init+0x168>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	440b      	add	r3, r1
 8002372:	fbb0 f3f3 	udiv	r3, r0, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e012      	b.n	80023ae <HAL_I2C_Init+0x18e>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1e58      	subs	r0, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	0099      	lsls	r1, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	fbb0 f3f3 	udiv	r3, r0, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Init+0x196>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e022      	b.n	80023fc <HAL_I2C_Init+0x1dc>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10e      	bne.n	80023dc <HAL_I2C_Init+0x1bc>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1e58      	subs	r0, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	440b      	add	r3, r1
 80023cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023da:	e00f      	b.n	80023fc <HAL_I2C_Init+0x1dc>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	0099      	lsls	r1, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	6809      	ldr	r1, [r1, #0]
 8002400:	4313      	orrs	r3, r2
 8002402:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69da      	ldr	r2, [r3, #28]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800242a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6911      	ldr	r1, [r2, #16]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	000186a0 	.word	0x000186a0
 8002498:	001e847f 	.word	0x001e847f
 800249c:	003d08ff 	.word	0x003d08ff
 80024a0:	431bde83 	.word	0x431bde83
 80024a4:	10624dd3 	.word	0x10624dd3

080024a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	461a      	mov	r2, r3
 80024b4:	460b      	mov	r3, r1
 80024b6:	817b      	strh	r3, [r7, #10]
 80024b8:	4613      	mov	r3, r2
 80024ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff fb0e 	bl	8001adc <HAL_GetTick>
 80024c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	f040 80e0 	bne.w	8002690 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2319      	movs	r3, #25
 80024d6:	2201      	movs	r2, #1
 80024d8:	4970      	ldr	r1, [pc, #448]	@ (800269c <HAL_I2C_Master_Transmit+0x1f4>)
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f964 	bl	80027a8 <I2C_WaitOnFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0d3      	b.n	8002692 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_I2C_Master_Transmit+0x50>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e0cc      	b.n	8002692 <HAL_I2C_Master_Transmit+0x1ea>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d007      	beq.n	800251e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800252c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2221      	movs	r2, #33	@ 0x21
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2210      	movs	r2, #16
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	893a      	ldrh	r2, [r7, #8]
 800254e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4a50      	ldr	r2, [pc, #320]	@ (80026a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800255e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002560:	8979      	ldrh	r1, [r7, #10]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f89c 	bl	80026a4 <I2C_MasterRequestWrite>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e08d      	b.n	8002692 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800258c:	e066      	b.n	800265c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	6a39      	ldr	r1, [r7, #32]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fa22 	bl	80029dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d107      	bne.n	80025b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06b      	b.n	8002692 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d11b      	bne.n	8002630 <HAL_I2C_Master_Transmit+0x188>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d017      	beq.n	8002630 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	6a39      	ldr	r1, [r7, #32]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fa19 	bl	8002a6c <I2C_WaitOnBTFFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00d      	beq.n	800265c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	2b04      	cmp	r3, #4
 8002646:	d107      	bne.n	8002658 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002656:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e01a      	b.n	8002692 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	2b00      	cmp	r3, #0
 8002662:	d194      	bne.n	800258e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	00100002 	.word	0x00100002
 80026a0:	ffff0000 	.word	0xffff0000

080026a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	460b      	mov	r3, r1
 80026b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d006      	beq.n	80026ce <I2C_MasterRequestWrite+0x2a>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d003      	beq.n	80026ce <I2C_MasterRequestWrite+0x2a>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026cc:	d108      	bne.n	80026e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e00b      	b.n	80026f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	2b12      	cmp	r3, #18
 80026e6:	d107      	bne.n	80026f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f84f 	bl	80027a8 <I2C_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800271e:	d103      	bne.n	8002728 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002726:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e035      	b.n	8002798 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002734:	d108      	bne.n	8002748 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002744:	611a      	str	r2, [r3, #16]
 8002746:	e01b      	b.n	8002780 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002748:	897b      	ldrh	r3, [r7, #10]
 800274a:	11db      	asrs	r3, r3, #7
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 0306 	and.w	r3, r3, #6
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f063 030f 	orn	r3, r3, #15
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	490e      	ldr	r1, [pc, #56]	@ (80027a0 <I2C_MasterRequestWrite+0xfc>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f898 	bl	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e010      	b.n	8002798 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4907      	ldr	r1, [pc, #28]	@ (80027a4 <I2C_MasterRequestWrite+0x100>)
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f888 	bl	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	00010008 	.word	0x00010008
 80027a4:	00010002 	.word	0x00010002

080027a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b8:	e048      	b.n	800284c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d044      	beq.n	800284c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff f98b 	bl	8001adc <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d139      	bne.n	800284c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10d      	bne.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4013      	ands	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	e00c      	b.n	8002818 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	43da      	mvns	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	429a      	cmp	r2, r3
 800281c:	d116      	bne.n	800284c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e023      	b.n	8002894 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10d      	bne.n	8002872 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	43da      	mvns	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	e00c      	b.n	800288c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	43da      	mvns	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4013      	ands	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	429a      	cmp	r2, r3
 8002890:	d093      	beq.n	80027ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028aa:	e071      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ba:	d123      	bne.n	8002904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	f043 0204 	orr.w	r2, r3, #4
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e067      	b.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d041      	beq.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290c:	f7ff f8e6 	bl	8001adc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d302      	bcc.n	8002922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d136      	bne.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10c      	bne.n	8002946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf14      	ite	ne
 800293e:	2301      	movne	r3, #1
 8002940:	2300      	moveq	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	e00b      	b.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	43da      	mvns	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4013      	ands	r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	f043 0220 	orr.w	r2, r3, #32
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e021      	b.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d10c      	bne.n	80029b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	43da      	mvns	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4013      	ands	r3, r2
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e00b      	b.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f47f af6d 	bne.w	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e8:	e034      	b.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f886 	bl	8002afc <I2C_IsAcknowledgeFailed>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e034      	b.n	8002a64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d028      	beq.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7ff f86b 	bl	8001adc <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d11d      	bne.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b80      	cmp	r3, #128	@ 0x80
 8002a24:	d016      	beq.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e007      	b.n	8002a64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5e:	2b80      	cmp	r3, #128	@ 0x80
 8002a60:	d1c3      	bne.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a78:	e034      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f83e 	bl	8002afc <I2C_IsAcknowledgeFailed>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e034      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d028      	beq.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7ff f823 	bl	8001adc <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11d      	bne.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d016      	beq.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e007      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d1c3      	bne.n	8002a7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b12:	d11b      	bne.n	8002b4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e267      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d075      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b7a:	4b88      	ldr	r3, [pc, #544]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d00c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b85      	ldr	r3, [pc, #532]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d112      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4b82      	ldr	r3, [pc, #520]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d157      	bne.n	8002c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e242      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x74>
 8002bc2:	4b76      	ldr	r3, [pc, #472]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b70      	ldr	r3, [pc, #448]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6f      	ldr	r2, [pc, #444]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6c      	ldr	r2, [pc, #432]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bf4:	4b69      	ldr	r3, [pc, #420]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a68      	ldr	r2, [pc, #416]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b66      	ldr	r3, [pc, #408]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe ff62 	bl	8001adc <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe ff5e 	bl	8001adc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e207      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ff4e 	bl	8001adc <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe ff4a 	bl	8001adc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	@ 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1f3      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b51      	ldr	r3, [pc, #324]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c72:	4b4a      	ldr	r3, [pc, #296]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b44      	ldr	r3, [pc, #272]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b41      	ldr	r3, [pc, #260]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1c7      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4937      	ldr	r1, [pc, #220]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b34      	ldr	r3, [pc, #208]	@ (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe ff03 	bl	8001adc <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe feff 	bl	8001adc <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1a8      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4925      	ldr	r1, [pc, #148]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fee2 	bl	8001adc <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fede 	bl	8001adc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e187      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d036      	beq.n	8002db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fec2 	bl	8001adc <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe febe 	bl	8001adc <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e167      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x200>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7c:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe feab 	bl	8001adc <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	e00e      	b.n	8002da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe fea7 	bl	8001adc <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d907      	bls.n	8002da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e150      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
 8002da4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b88      	ldr	r3, [pc, #544]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ea      	bne.n	8002d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8097 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b81      	ldr	r3, [pc, #516]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	4a7c      	ldr	r2, [pc, #496]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b77      	ldr	r3, [pc, #476]	@ (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b74      	ldr	r3, [pc, #464]	@ (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a73      	ldr	r2, [pc, #460]	@ (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fe67 	bl	8001adc <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe fe63 	bl	8001adc <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e10c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2ea>
 8002e38:	4b64      	ldr	r3, [pc, #400]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a63      	ldr	r2, [pc, #396]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e44:	e01c      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x30c>
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	4a5e      	ldr	r2, [pc, #376]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e68:	4b58      	ldr	r3, [pc, #352]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6c:	4a57      	ldr	r2, [pc, #348]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e74:	4b55      	ldr	r3, [pc, #340]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e78:	4a54      	ldr	r2, [pc, #336]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f023 0304 	bic.w	r3, r3, #4
 8002e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fe28 	bl	8001adc <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fe24 	bl	8001adc <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0cb      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	4b49      	ldr	r3, [pc, #292]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fe12 	bl	8001adc <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fe0e 	bl	8001adc <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0b5      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ee      	bne.n	8002ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b39      	ldr	r3, [pc, #228]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	4a38      	ldr	r2, [pc, #224]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a1 	beq.w	800303c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efa:	4b34      	ldr	r3, [pc, #208]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d05c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d141      	bne.n	8002f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fde2 	bl	8001adc <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fdde 	bl	8001adc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e087      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b27      	ldr	r3, [pc, #156]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	3b01      	subs	r3, #1
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	491b      	ldr	r1, [pc, #108]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fdb7 	bl	8001adc <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe fdb3 	bl	8001adc <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e05c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x416>
 8002f90:	e054      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fda0 	bl	8001adc <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fd9c 	bl	8001adc <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e045      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
 8002fbe:	e03d      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e038      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x4ec>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d028      	beq.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d121      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d11a      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800300e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003010:	4293      	cmp	r3, r2
 8003012:	d111      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0cc      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b68      	ldr	r3, [pc, #416]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d90c      	bls.n	8003088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b65      	ldr	r3, [pc, #404]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b63      	ldr	r3, [pc, #396]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b59      	ldr	r3, [pc, #356]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a58      	ldr	r2, [pc, #352]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b8:	4b53      	ldr	r3, [pc, #332]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b50      	ldr	r3, [pc, #320]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d044      	beq.n	800316c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b47      	ldr	r3, [pc, #284]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d119      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b3f      	ldr	r3, [pc, #252]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b3b      	ldr	r3, [pc, #236]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e067      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312a:	4b37      	ldr	r3, [pc, #220]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4934      	ldr	r1, [pc, #208]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800313c:	f7fe fcce 	bl	8001adc <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fe fcca 	bl	8001adc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e04f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	4b2b      	ldr	r3, [pc, #172]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800316c:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d20c      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b20      	ldr	r3, [pc, #128]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b19      	ldr	r3, [pc, #100]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031d2:	f000 f821 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031ee:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fc2e 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	08005f74 	.word	0x08005f74
 8003210:	20000024 	.word	0x20000024
 8003214:	20000028 	.word	0x20000028

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b094      	sub	sp, #80	@ 0x50
 800321e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003230:	4b79      	ldr	r3, [pc, #484]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d00d      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x40>
 800323c:	2b08      	cmp	r3, #8
 800323e:	f200 80e1 	bhi.w	8003404 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x3a>
 800324a:	e0db      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b73      	ldr	r3, [pc, #460]	@ (800341c <HAL_RCC_GetSysClockFreq+0x204>)
 800324e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003250:	e0db      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003252:	4b73      	ldr	r3, [pc, #460]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x208>)
 8003254:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003256:	e0d8      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003258:	4b6f      	ldr	r3, [pc, #444]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003260:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003262:	4b6d      	ldr	r3, [pc, #436]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b6a      	ldr	r3, [pc, #424]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	2200      	movs	r2, #0
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003278:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	@ 0x34
 8003286:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800328a:	4622      	mov	r2, r4
 800328c:	462b      	mov	r3, r5
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329c:	0150      	lsls	r0, r2, #5
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4621      	mov	r1, r4
 80032a4:	1a51      	subs	r1, r2, r1
 80032a6:	6139      	str	r1, [r7, #16]
 80032a8:	4629      	mov	r1, r5
 80032aa:	eb63 0301 	sbc.w	r3, r3, r1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032bc:	4659      	mov	r1, fp
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c6:	4651      	mov	r1, sl
 80032c8:	018a      	lsls	r2, r1, #6
 80032ca:	4651      	mov	r1, sl
 80032cc:	ebb2 0801 	subs.w	r8, r2, r1
 80032d0:	4659      	mov	r1, fp
 80032d2:	eb63 0901 	sbc.w	r9, r3, r1
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ea:	4690      	mov	r8, r2
 80032ec:	4699      	mov	r9, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	eb18 0303 	adds.w	r3, r8, r3
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	462b      	mov	r3, r5
 80032f8:	eb49 0303 	adc.w	r3, r9, r3
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800330a:	4629      	mov	r1, r5
 800330c:	024b      	lsls	r3, r1, #9
 800330e:	4621      	mov	r1, r4
 8003310:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003314:	4621      	mov	r1, r4
 8003316:	024a      	lsls	r2, r1, #9
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800331e:	2200      	movs	r2, #0
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003328:	f7fc ffaa 	bl	8000280 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003334:	e058      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b38      	ldr	r3, [pc, #224]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	2200      	movs	r2, #0
 800333e:	4618      	mov	r0, r3
 8003340:	4611      	mov	r1, r2
 8003342:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
 800334c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0159      	lsls	r1, r3, #5
 800335e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003362:	0150      	lsls	r0, r2, #5
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4641      	mov	r1, r8
 800336a:	ebb2 0a01 	subs.w	sl, r2, r1
 800336e:	4649      	mov	r1, r9
 8003370:	eb63 0b01 	sbc.w	fp, r3, r1
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003388:	ebb2 040a 	subs.w	r4, r2, sl
 800338c:	eb63 050b 	sbc.w	r5, r3, fp
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	00eb      	lsls	r3, r5, #3
 800339a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339e:	00e2      	lsls	r2, r4, #3
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	4643      	mov	r3, r8
 80033a6:	18e3      	adds	r3, r4, r3
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	464b      	mov	r3, r9
 80033ac:	eb45 0303 	adc.w	r3, r5, r3
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033be:	4629      	mov	r1, r5
 80033c0:	028b      	lsls	r3, r1, #10
 80033c2:	4621      	mov	r1, r4
 80033c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c8:	4621      	mov	r1, r4
 80033ca:	028a      	lsls	r2, r1, #10
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d2:	2200      	movs	r2, #0
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	61fa      	str	r2, [r7, #28]
 80033d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033dc:	f7fc ff50 	bl	8000280 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003402:	e002      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4b05      	ldr	r3, [pc, #20]	@ (800341c <HAL_RCC_GetSysClockFreq+0x204>)
 8003406:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800340c:	4618      	mov	r0, r3
 800340e:	3750      	adds	r7, #80	@ 0x50
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000024 	.word	0x20000024

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	@ (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08005f84 	.word	0x08005f84

08003464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003468:	f7ff ffdc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0b5b      	lsrs	r3, r3, #13
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	@ (8003488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	08005f84 	.word	0x08005f84

0800348c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e041      	b.n	8003522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe f9ca 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 faf2 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d001      	beq.n	8003544 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e03c      	b.n	80035be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_TIM_Base_Start+0xa0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_TIM_Base_Start+0x5c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355e:	d013      	beq.n	8003588 <HAL_TIM_Base_Start+0x5c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1a      	ldr	r2, [pc, #104]	@ (80035d0 <HAL_TIM_Base_Start+0xa4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_TIM_Base_Start+0x5c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a19      	ldr	r2, [pc, #100]	@ (80035d4 <HAL_TIM_Base_Start+0xa8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_TIM_Base_Start+0x5c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a17      	ldr	r2, [pc, #92]	@ (80035d8 <HAL_TIM_Base_Start+0xac>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIM_Base_Start+0x5c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a16      	ldr	r2, [pc, #88]	@ (80035dc <HAL_TIM_Base_Start+0xb0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d111      	bne.n	80035ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b06      	cmp	r3, #6
 8003598:	d010      	beq.n	80035bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	e007      	b.n	80035bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40014000 	.word	0x40014000

080035e0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a1a      	ldr	r2, [r3, #32]
 80035ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <HAL_TIM_Base_Stop+0x38>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	f240 4344 	movw	r3, #1092	@ 0x444
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_TIM_Base_Stop+0x38>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e044      	b.n	80036d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1e      	ldr	r2, [pc, #120]	@ (80036e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x6c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003672:	d013      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x6c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1a      	ldr	r2, [pc, #104]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x6c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a19      	ldr	r2, [pc, #100]	@ (80036e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x6c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a17      	ldr	r2, [pc, #92]	@ (80036ec <HAL_TIM_Base_Start_IT+0xbc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x6c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a16      	ldr	r2, [pc, #88]	@ (80036f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d111      	bne.n	80036c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d010      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	e007      	b.n	80036d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40010000 	.word	0x40010000
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800
 80036ec:	40000c00 	.word	0x40000c00
 80036f0:	40014000 	.word	0x40014000

080036f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d020      	beq.n	8003758 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0202 	mvn.w	r2, #2
 8003728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f999 	bl	8003a76 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f98b 	bl	8003a62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f99c 	bl	8003a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d020      	beq.n	80037a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01b      	beq.n	80037a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0204 	mvn.w	r2, #4
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2202      	movs	r2, #2
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f973 	bl	8003a76 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f965 	bl	8003a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f976 	bl	8003a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d020      	beq.n	80037f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01b      	beq.n	80037f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0208 	mvn.w	r2, #8
 80037c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2204      	movs	r2, #4
 80037c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f94d 	bl	8003a76 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f93f 	bl	8003a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f950 	bl	8003a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d020      	beq.n	800383c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01b      	beq.n	800383c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2208      	movs	r2, #8
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f927 	bl	8003a76 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f919 	bl	8003a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f92a 	bl	8003a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00c      	beq.n	8003860 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0201 	mvn.w	r2, #1
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd fd02 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fab6 	bl	8003df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8fb 	bl	8003a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0220 	mvn.w	r2, #32
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa88 	bl	8003ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_TIM_ConfigClockSource+0x1c>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e0b4      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x186>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800390e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003928:	d03e      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0xd4>
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392e:	f200 8087 	bhi.w	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003936:	f000 8086 	beq.w	8003a46 <HAL_TIM_ConfigClockSource+0x172>
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393e:	d87f      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
 8003940:	2b70      	cmp	r3, #112	@ 0x70
 8003942:	d01a      	beq.n	800397a <HAL_TIM_ConfigClockSource+0xa6>
 8003944:	2b70      	cmp	r3, #112	@ 0x70
 8003946:	d87b      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
 8003948:	2b60      	cmp	r3, #96	@ 0x60
 800394a:	d050      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x11a>
 800394c:	2b60      	cmp	r3, #96	@ 0x60
 800394e:	d877      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
 8003950:	2b50      	cmp	r3, #80	@ 0x50
 8003952:	d03c      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0xfa>
 8003954:	2b50      	cmp	r3, #80	@ 0x50
 8003956:	d873      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	d058      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x13a>
 800395c:	2b40      	cmp	r3, #64	@ 0x40
 800395e:	d86f      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
 8003960:	2b30      	cmp	r3, #48	@ 0x30
 8003962:	d064      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x15a>
 8003964:	2b30      	cmp	r3, #48	@ 0x30
 8003966:	d86b      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
 8003968:	2b20      	cmp	r3, #32
 800396a:	d060      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x15a>
 800396c:	2b20      	cmp	r3, #32
 800396e:	d867      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d05c      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x15a>
 8003974:	2b10      	cmp	r3, #16
 8003976:	d05a      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x15a>
 8003978:	e062      	b.n	8003a40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800398a:	f000 f999 	bl	8003cc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800399c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	609a      	str	r2, [r3, #8]
      break;
 80039a6:	e04f      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039b8:	f000 f982 	bl	8003cc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039ca:	609a      	str	r2, [r3, #8]
      break;
 80039cc:	e03c      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	461a      	mov	r2, r3
 80039dc:	f000 f8f6 	bl	8003bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2150      	movs	r1, #80	@ 0x50
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f94f 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80039ec:	e02c      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fa:	461a      	mov	r2, r3
 80039fc:	f000 f915 	bl	8003c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2160      	movs	r1, #96	@ 0x60
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f93f 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 8003a0c:	e01c      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f000 f8d6 	bl	8003bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2140      	movs	r1, #64	@ 0x40
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f92f 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 8003a2c:	e00c      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f000 f926 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 8003a3e:	e003      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      break;
 8003a44:	e000      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	@ (8003bb0 <TIM_Base_SetConfig+0xfc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00f      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad2:	d00b      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a37      	ldr	r2, [pc, #220]	@ (8003bb4 <TIM_Base_SetConfig+0x100>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d007      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a36      	ldr	r2, [pc, #216]	@ (8003bb8 <TIM_Base_SetConfig+0x104>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a35      	ldr	r2, [pc, #212]	@ (8003bbc <TIM_Base_SetConfig+0x108>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <TIM_Base_SetConfig+0xfc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01b      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0c:	d017      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a28      	ldr	r2, [pc, #160]	@ (8003bb4 <TIM_Base_SetConfig+0x100>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a27      	ldr	r2, [pc, #156]	@ (8003bb8 <TIM_Base_SetConfig+0x104>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a26      	ldr	r2, [pc, #152]	@ (8003bbc <TIM_Base_SetConfig+0x108>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a25      	ldr	r2, [pc, #148]	@ (8003bc0 <TIM_Base_SetConfig+0x10c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a24      	ldr	r2, [pc, #144]	@ (8003bc4 <TIM_Base_SetConfig+0x110>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a23      	ldr	r2, [pc, #140]	@ (8003bc8 <TIM_Base_SetConfig+0x114>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb0 <TIM_Base_SetConfig+0xfc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d105      	bne.n	8003ba2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f023 0201 	bic.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	611a      	str	r2, [r3, #16]
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40014400 	.word	0x40014400
 8003bc8:	40014800 	.word	0x40014800

08003bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 030a 	bic.w	r3, r3, #10
 8003c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 0210 	bic.w	r2, r3, #16
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f043 0307 	orr.w	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	021a      	lsls	r2, r3, #8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e050      	b.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d64:	d013      	beq.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a18      	ldr	r2, [pc, #96]	@ (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a16      	ldr	r2, [pc, #88]	@ (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a15      	ldr	r2, [pc, #84]	@ (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10c      	bne.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800
 8003dd4:	40000c00 	.word	0x40000c00
 8003dd8:	40014000 	.word	0x40014000

08003ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e042      	b.n	8003e9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fd76 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	@ 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fd69 	bl	8004920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d175      	bne.n	8003fb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_Transmit+0x2c>
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e06e      	b.n	8003fb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2221      	movs	r2, #33	@ 0x21
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ee2:	f7fd fdfb 	bl	8001adc <HAL_GetTick>
 8003ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	88fa      	ldrh	r2, [r7, #6]
 8003ef2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efc:	d108      	bne.n	8003f10 <HAL_UART_Transmit+0x6c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e003      	b.n	8003f18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f18:	e02e      	b.n	8003f78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2180      	movs	r1, #128	@ 0x80
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fb05 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e03a      	b.n	8003fb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	3302      	adds	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e007      	b.n	8003f6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3301      	adds	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1cb      	bne.n	8003f1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2140      	movs	r1, #64	@ 0x40
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fad1 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e006      	b.n	8003fb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0ba      	sub	sp, #232	@ 0xe8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_UART_IRQHandler+0x66>
 800400e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fbc2 	bl	80047a4 <UART_Receive_IT>
      return;
 8004020:	e25b      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80de 	beq.w	80041e8 <HAL_UART_IRQHandler+0x22c>
 800402c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80d1 	beq.w	80041e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_UART_IRQHandler+0xae>
 8004052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_UART_IRQHandler+0xd2>
 8004076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	f043 0202 	orr.w	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_UART_IRQHandler+0xf6>
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d011      	beq.n	80040e2 <HAL_UART_IRQHandler+0x126>
 80040be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f043 0208 	orr.w	r2, r3, #8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 81f2 	beq.w	80044d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_UART_IRQHandler+0x14e>
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fb4d 	bl	80047a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004114:	2b40      	cmp	r3, #64	@ 0x40
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d103      	bne.n	8004136 <HAL_UART_IRQHandler+0x17a>
 800412e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04f      	beq.n	80041d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa55 	bl	80045e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	d141      	bne.n	80041ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004176:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800417a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800418e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1d9      	bne.n	800414a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d013      	beq.n	80041c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a2:	4a7e      	ldr	r2, [pc, #504]	@ (800439c <HAL_UART_IRQHandler+0x3e0>)
 80041a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fe47 	bl	8001e3e <HAL_DMA_Abort_IT>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041c0:	4610      	mov	r0, r2
 80041c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	e00e      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f99e 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	e00a      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f99a 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	e006      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f996 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041e2:	e175      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	bf00      	nop
    return;
 80041e6:	e173      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	f040 814f 	bne.w	8004490 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8148 	beq.w	8004490 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8141 	beq.w	8004490 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422e:	2b40      	cmp	r3, #64	@ 0x40
 8004230:	f040 80b6 	bne.w	80043a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8145 	beq.w	80044d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800424e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004252:	429a      	cmp	r2, r3
 8004254:	f080 813e 	bcs.w	80044d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800425e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426a:	f000 8088 	beq.w	800437e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800428c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800429a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800429e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1d9      	bne.n	800426e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3314      	adds	r3, #20
 80042c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3314      	adds	r3, #20
 80042da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e1      	bne.n	80042ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3314      	adds	r3, #20
 80042fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800430c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3314      	adds	r3, #20
 8004316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800431a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800431c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004320:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e3      	bne.n	80042f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800434c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004360:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004362:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004366:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800436e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e3      	bne.n	800433c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd fcf0 	bl	8001d5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800438c:	b29b      	uxth	r3, r3
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	b29b      	uxth	r3, r3
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8c1 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800439a:	e09b      	b.n	80044d4 <HAL_UART_IRQHandler+0x518>
 800439c:	080046ad 	.word	0x080046ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 808e 	beq.w	80044d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8089 	beq.w	80044d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80043ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e3      	bne.n	80043c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	623b      	str	r3, [r7, #32]
   return(result);
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004422:	633a      	str	r2, [r7, #48]	@ 0x30
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e3      	bne.n	80043fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60fb      	str	r3, [r7, #12]
   return(result);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004468:	61fa      	str	r2, [r7, #28]
 800446a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	617b      	str	r3, [r7, #20]
   return(result);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e3      	bne.n	8004444 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f847 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800448e:	e023      	b.n	80044d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_UART_IRQHandler+0x4f4>
 800449c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f913 	bl	80046d4 <UART_Transmit_IT>
    return;
 80044ae:	e014      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <HAL_UART_IRQHandler+0x51e>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f953 	bl	8004774 <UART_EndTransmit_IT>
    return;
 80044ce:	e004      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
    return;
 80044d0:	bf00      	nop
 80044d2:	e002      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
      return;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
      return;
 80044d8:	bf00      	nop
  }
}
 80044da:	37e8      	adds	r7, #232	@ 0xe8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004544:	e03b      	b.n	80045be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d037      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454e:	f7fd fac5 	bl	8001adc <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	429a      	cmp	r2, r3
 800455c:	d302      	bcc.n	8004564 <UART_WaitOnFlagUntilTimeout+0x30>
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e03a      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d023      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0x8a>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b80      	cmp	r3, #128	@ 0x80
 800457a:	d020      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0x8a>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b40      	cmp	r3, #64	@ 0x40
 8004580:	d01d      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b08      	cmp	r3, #8
 800458e:	d116      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f81d 	bl	80045e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2208      	movs	r2, #8
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e00f      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4013      	ands	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d0b4      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b095      	sub	sp, #84	@ 0x54
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004604:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800460e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004610:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004614:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e5      	bne.n	80045ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3314      	adds	r3, #20
 8004628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	61fb      	str	r3, [r7, #28]
   return(result);
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3314      	adds	r3, #20
 8004640:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004644:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e5      	bne.n	8004622 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	2b01      	cmp	r3, #1
 800465c:	d119      	bne.n	8004692 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	60bb      	str	r3, [r7, #8]
   return(result);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0310 	bic.w	r3, r3, #16
 8004674:	647b      	str	r3, [r7, #68]	@ 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800467e:	61ba      	str	r2, [r7, #24]
 8004680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	613b      	str	r3, [r7, #16]
   return(result);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046a0:	bf00      	nop
 80046a2:	3754      	adds	r7, #84	@ 0x54
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff ff1e 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b21      	cmp	r3, #33	@ 0x21
 80046e6:	d13e      	bne.n	8004766 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f0:	d114      	bne.n	800471c <UART_Transmit_IT+0x48>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d110      	bne.n	800471c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800470e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	621a      	str	r2, [r3, #32]
 800471a:	e008      	b.n	800472e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	1c59      	adds	r1, r3, #1
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6211      	str	r1, [r2, #32]
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29b      	uxth	r3, r3
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4619      	mov	r1, r3
 800473c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004750:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004760:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
  }
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fea3 	bl	80044e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08c      	sub	sp, #48	@ 0x30
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b22      	cmp	r3, #34	@ 0x22
 80047b6:	f040 80ae 	bne.w	8004916 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c2:	d117      	bne.n	80047f4 <UART_Receive_IT+0x50>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d113      	bne.n	80047f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80047f2:	e026      	b.n	8004842 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004806:	d007      	beq.n	8004818 <UART_Receive_IT+0x74>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <UART_Receive_IT+0x82>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e008      	b.n	8004838 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004832:	b2da      	uxtb	r2, r3
 8004834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004836:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29b      	uxth	r3, r3
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4619      	mov	r1, r3
 8004850:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004852:	2b00      	cmp	r3, #0
 8004854:	d15d      	bne.n	8004912 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0220 	bic.w	r2, r2, #32
 8004864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	d135      	bne.n	8004908 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c2:	623a      	str	r2, [r7, #32]
 80048c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	69f9      	ldr	r1, [r7, #28]
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d10a      	bne.n	80048fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fe0b 	bl	800451c <HAL_UARTEx_RxEventCallback>
 8004906:	e002      	b.n	800490e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fdf3 	bl	80044f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e002      	b.n	8004918 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3730      	adds	r7, #48	@ 0x30
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b0c0      	sub	sp, #256	@ 0x100
 8004926:	af00      	add	r7, sp, #0
 8004928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493c:	68d9      	ldr	r1, [r3, #12]
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	ea40 0301 	orr.w	r3, r0, r1
 8004948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	431a      	orrs	r2, r3
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	431a      	orrs	r2, r3
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004978:	f021 010c 	bic.w	r1, r1, #12
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004986:	430b      	orrs	r3, r1
 8004988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499a:	6999      	ldr	r1, [r3, #24]
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	ea40 0301 	orr.w	r3, r0, r1
 80049a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b8f      	ldr	r3, [pc, #572]	@ (8004bec <UART_SetConfig+0x2cc>)
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d005      	beq.n	80049c0 <UART_SetConfig+0xa0>
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b8d      	ldr	r3, [pc, #564]	@ (8004bf0 <UART_SetConfig+0x2d0>)
 80049bc:	429a      	cmp	r2, r3
 80049be:	d104      	bne.n	80049ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c0:	f7fe fd50 	bl	8003464 <HAL_RCC_GetPCLK2Freq>
 80049c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049c8:	e003      	b.n	80049d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ca:	f7fe fd37 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80049ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049dc:	f040 810c 	bne.w	8004bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	1891      	adds	r1, r2, r2
 80049f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049fa:	415b      	adcs	r3, r3
 80049fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a02:	4621      	mov	r1, r4
 8004a04:	eb12 0801 	adds.w	r8, r2, r1
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb43 0901 	adc.w	r9, r3, r1
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a22:	4690      	mov	r8, r2
 8004a24:	4699      	mov	r9, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	eb18 0303 	adds.w	r3, r8, r3
 8004a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a30:	462b      	mov	r3, r5
 8004a32:	eb49 0303 	adc.w	r3, r9, r3
 8004a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a4e:	460b      	mov	r3, r1
 8004a50:	18db      	adds	r3, r3, r3
 8004a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a54:	4613      	mov	r3, r2
 8004a56:	eb42 0303 	adc.w	r3, r2, r3
 8004a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a64:	f7fb fc0c 	bl	8000280 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4b61      	ldr	r3, [pc, #388]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	011c      	lsls	r4, r3, #4
 8004a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a88:	4642      	mov	r2, r8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	1891      	adds	r1, r2, r2
 8004a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a90:	415b      	adcs	r3, r3
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a98:	4641      	mov	r1, r8
 8004a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab8:	4692      	mov	sl, r2
 8004aba:	469b      	mov	fp, r3
 8004abc:	4643      	mov	r3, r8
 8004abe:	eb1a 0303 	adds.w	r3, sl, r3
 8004ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8004acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	18db      	adds	r3, r3, r3
 8004ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aea:	4613      	mov	r3, r2
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004afa:	f7fb fbc1 	bl	8000280 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004b06:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	2264      	movs	r2, #100	@ 0x64
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	1acb      	subs	r3, r1, r3
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b1a:	4b36      	ldr	r3, [pc, #216]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b28:	441c      	add	r4, r3
 8004b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b44:	415b      	adcs	r3, r3
 8004b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	1851      	adds	r1, r2, r1
 8004b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b52:	4649      	mov	r1, r9
 8004b54:	414b      	adcs	r3, r1
 8004b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b64:	4659      	mov	r1, fp
 8004b66:	00cb      	lsls	r3, r1, #3
 8004b68:	4651      	mov	r1, sl
 8004b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6e:	4651      	mov	r1, sl
 8004b70:	00ca      	lsls	r2, r1, #3
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	4642      	mov	r2, r8
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b80:	464b      	mov	r3, r9
 8004b82:	460a      	mov	r2, r1
 8004b84:	eb42 0303 	adc.w	r3, r2, r3
 8004b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	18db      	adds	r3, r3, r3
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	eb42 0303 	adc.w	r3, r2, r3
 8004bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bb6:	f7fb fb63 	bl	8000280 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	2164      	movs	r1, #100	@ 0x64
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	3332      	adds	r3, #50	@ 0x32
 8004bd2:	4a08      	ldr	r2, [pc, #32]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 0207 	and.w	r2, r3, #7
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4422      	add	r2, r4
 8004be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004be8:	e106      	b.n	8004df8 <UART_SetConfig+0x4d8>
 8004bea:	bf00      	nop
 8004bec:	40011000 	.word	0x40011000
 8004bf0:	40011400 	.word	0x40011400
 8004bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c0a:	4642      	mov	r2, r8
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	1891      	adds	r1, r2, r2
 8004c10:	6239      	str	r1, [r7, #32]
 8004c12:	415b      	adcs	r3, r3
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	1854      	adds	r4, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb43 0501 	adc.w	r5, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	00eb      	lsls	r3, r5, #3
 8004c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c32:	00e2      	lsls	r2, r4, #3
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	4643      	mov	r3, r8
 8004c3a:	18e3      	adds	r3, r4, r3
 8004c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c40:	464b      	mov	r3, r9
 8004c42:	eb45 0303 	adc.w	r3, r5, r3
 8004c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c66:	4629      	mov	r1, r5
 8004c68:	008b      	lsls	r3, r1, #2
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c70:	4621      	mov	r1, r4
 8004c72:	008a      	lsls	r2, r1, #2
 8004c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c78:	f7fb fb02 	bl	8000280 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4b60      	ldr	r3, [pc, #384]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004c82:	fba3 2302 	umull	r2, r3, r3, r2
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	011c      	lsls	r4, r3, #4
 8004c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	1891      	adds	r1, r2, r2
 8004ca2:	61b9      	str	r1, [r7, #24]
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cac:	4641      	mov	r1, r8
 8004cae:	1851      	adds	r1, r2, r1
 8004cb0:	6139      	str	r1, [r7, #16]
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	414b      	adcs	r3, r1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	00cb      	lsls	r3, r1, #3
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cce:	4651      	mov	r1, sl
 8004cd0:	00ca      	lsls	r2, r1, #3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	eb42 0303 	adc.w	r3, r2, r3
 8004ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d04:	4649      	mov	r1, r9
 8004d06:	008b      	lsls	r3, r1, #2
 8004d08:	4641      	mov	r1, r8
 8004d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0e:	4641      	mov	r1, r8
 8004d10:	008a      	lsls	r2, r1, #2
 8004d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d16:	f7fb fab3 	bl	8000280 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4b38      	ldr	r3, [pc, #224]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004d22:	fba3 2301 	umull	r2, r3, r3, r1
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2264      	movs	r2, #100	@ 0x64
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	1acb      	subs	r3, r1, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	@ 0x32
 8004d34:	4a33      	ldr	r2, [pc, #204]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d40:	441c      	add	r4, r3
 8004d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d46:	2200      	movs	r2, #0
 8004d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d50:	4642      	mov	r2, r8
 8004d52:	464b      	mov	r3, r9
 8004d54:	1891      	adds	r1, r2, r2
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	415b      	adcs	r3, r3
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d60:	4641      	mov	r1, r8
 8004d62:	1851      	adds	r1, r2, r1
 8004d64:	6039      	str	r1, [r7, #0]
 8004d66:	4649      	mov	r1, r9
 8004d68:	414b      	adcs	r3, r1
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d78:	4659      	mov	r1, fp
 8004d7a:	00cb      	lsls	r3, r1, #3
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d82:	4651      	mov	r1, sl
 8004d84:	00ca      	lsls	r2, r1, #3
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d92:	464b      	mov	r3, r9
 8004d94:	460a      	mov	r2, r1
 8004d96:	eb42 0303 	adc.w	r3, r2, r3
 8004d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004db4:	4649      	mov	r1, r9
 8004db6:	008b      	lsls	r3, r1, #2
 8004db8:	4641      	mov	r1, r8
 8004dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dbe:	4641      	mov	r1, r8
 8004dc0:	008a      	lsls	r2, r1, #2
 8004dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004dc6:	f7fb fa5b 	bl	8000280 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	2164      	movs	r1, #100	@ 0x64
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	3332      	adds	r3, #50	@ 0x32
 8004de2:	4a08      	ldr	r2, [pc, #32]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	f003 020f 	and.w	r2, r3, #15
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4422      	add	r2, r4
 8004df6:	609a      	str	r2, [r3, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e04:	51eb851f 	.word	0x51eb851f

08004e08 <std>:
 8004e08:	2300      	movs	r3, #0
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e16:	6083      	str	r3, [r0, #8]
 8004e18:	8181      	strh	r1, [r0, #12]
 8004e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e1c:	81c2      	strh	r2, [r0, #14]
 8004e1e:	6183      	str	r3, [r0, #24]
 8004e20:	4619      	mov	r1, r3
 8004e22:	2208      	movs	r2, #8
 8004e24:	305c      	adds	r0, #92	@ 0x5c
 8004e26:	f000 f9f9 	bl	800521c <memset>
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <std+0x58>)
 8004e2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <std+0x5c>)
 8004e30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e32:	4b0d      	ldr	r3, [pc, #52]	@ (8004e68 <std+0x60>)
 8004e34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e36:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <std+0x64>)
 8004e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <std+0x68>)
 8004e3c:	6224      	str	r4, [r4, #32]
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	d006      	beq.n	8004e50 <std+0x48>
 8004e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e46:	4294      	cmp	r4, r2
 8004e48:	d002      	beq.n	8004e50 <std+0x48>
 8004e4a:	33d0      	adds	r3, #208	@ 0xd0
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	d105      	bne.n	8004e5c <std+0x54>
 8004e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e58:	f000 ba58 	b.w	800530c <__retarget_lock_init_recursive>
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	bf00      	nop
 8004e60:	0800506d 	.word	0x0800506d
 8004e64:	0800508f 	.word	0x0800508f
 8004e68:	080050c7 	.word	0x080050c7
 8004e6c:	080050eb 	.word	0x080050eb
 8004e70:	20000250 	.word	0x20000250

08004e74 <stdio_exit_handler>:
 8004e74:	4a02      	ldr	r2, [pc, #8]	@ (8004e80 <stdio_exit_handler+0xc>)
 8004e76:	4903      	ldr	r1, [pc, #12]	@ (8004e84 <stdio_exit_handler+0x10>)
 8004e78:	4803      	ldr	r0, [pc, #12]	@ (8004e88 <stdio_exit_handler+0x14>)
 8004e7a:	f000 b869 	b.w	8004f50 <_fwalk_sglue>
 8004e7e:	bf00      	nop
 8004e80:	20000030 	.word	0x20000030
 8004e84:	08005bad 	.word	0x08005bad
 8004e88:	20000040 	.word	0x20000040

08004e8c <cleanup_stdio>:
 8004e8c:	6841      	ldr	r1, [r0, #4]
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <cleanup_stdio+0x34>)
 8004e90:	4299      	cmp	r1, r3
 8004e92:	b510      	push	{r4, lr}
 8004e94:	4604      	mov	r4, r0
 8004e96:	d001      	beq.n	8004e9c <cleanup_stdio+0x10>
 8004e98:	f000 fe88 	bl	8005bac <_fflush_r>
 8004e9c:	68a1      	ldr	r1, [r4, #8]
 8004e9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <cleanup_stdio+0x38>)
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d002      	beq.n	8004eaa <cleanup_stdio+0x1e>
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f000 fe81 	bl	8005bac <_fflush_r>
 8004eaa:	68e1      	ldr	r1, [r4, #12]
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <cleanup_stdio+0x3c>)
 8004eae:	4299      	cmp	r1, r3
 8004eb0:	d004      	beq.n	8004ebc <cleanup_stdio+0x30>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb8:	f000 be78 	b.w	8005bac <_fflush_r>
 8004ebc:	bd10      	pop	{r4, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000250 	.word	0x20000250
 8004ec4:	200002b8 	.word	0x200002b8
 8004ec8:	20000320 	.word	0x20000320

08004ecc <global_stdio_init.part.0>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <global_stdio_init.part.0+0x30>)
 8004ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8004f00 <global_stdio_init.part.0+0x34>)
 8004ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f04 <global_stdio_init.part.0+0x38>)
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2104      	movs	r1, #4
 8004edc:	f7ff ff94 	bl	8004e08 <std>
 8004ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	2109      	movs	r1, #9
 8004ee8:	f7ff ff8e 	bl	8004e08 <std>
 8004eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef6:	2112      	movs	r1, #18
 8004ef8:	f7ff bf86 	b.w	8004e08 <std>
 8004efc:	20000388 	.word	0x20000388
 8004f00:	20000250 	.word	0x20000250
 8004f04:	08004e75 	.word	0x08004e75

08004f08 <__sfp_lock_acquire>:
 8004f08:	4801      	ldr	r0, [pc, #4]	@ (8004f10 <__sfp_lock_acquire+0x8>)
 8004f0a:	f000 ba00 	b.w	800530e <__retarget_lock_acquire_recursive>
 8004f0e:	bf00      	nop
 8004f10:	20000391 	.word	0x20000391

08004f14 <__sfp_lock_release>:
 8004f14:	4801      	ldr	r0, [pc, #4]	@ (8004f1c <__sfp_lock_release+0x8>)
 8004f16:	f000 b9fb 	b.w	8005310 <__retarget_lock_release_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	20000391 	.word	0x20000391

08004f20 <__sinit>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4604      	mov	r4, r0
 8004f24:	f7ff fff0 	bl	8004f08 <__sfp_lock_acquire>
 8004f28:	6a23      	ldr	r3, [r4, #32]
 8004f2a:	b11b      	cbz	r3, 8004f34 <__sinit+0x14>
 8004f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f30:	f7ff bff0 	b.w	8004f14 <__sfp_lock_release>
 8004f34:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <__sinit+0x28>)
 8004f36:	6223      	str	r3, [r4, #32]
 8004f38:	4b04      	ldr	r3, [pc, #16]	@ (8004f4c <__sinit+0x2c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f5      	bne.n	8004f2c <__sinit+0xc>
 8004f40:	f7ff ffc4 	bl	8004ecc <global_stdio_init.part.0>
 8004f44:	e7f2      	b.n	8004f2c <__sinit+0xc>
 8004f46:	bf00      	nop
 8004f48:	08004e8d 	.word	0x08004e8d
 8004f4c:	20000388 	.word	0x20000388

08004f50 <_fwalk_sglue>:
 8004f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f54:	4607      	mov	r7, r0
 8004f56:	4688      	mov	r8, r1
 8004f58:	4614      	mov	r4, r2
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f60:	f1b9 0901 	subs.w	r9, r9, #1
 8004f64:	d505      	bpl.n	8004f72 <_fwalk_sglue+0x22>
 8004f66:	6824      	ldr	r4, [r4, #0]
 8004f68:	2c00      	cmp	r4, #0
 8004f6a:	d1f7      	bne.n	8004f5c <_fwalk_sglue+0xc>
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f72:	89ab      	ldrh	r3, [r5, #12]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d907      	bls.n	8004f88 <_fwalk_sglue+0x38>
 8004f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	d003      	beq.n	8004f88 <_fwalk_sglue+0x38>
 8004f80:	4629      	mov	r1, r5
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c0      	blx	r8
 8004f86:	4306      	orrs	r6, r0
 8004f88:	3568      	adds	r5, #104	@ 0x68
 8004f8a:	e7e9      	b.n	8004f60 <_fwalk_sglue+0x10>

08004f8c <iprintf>:
 8004f8c:	b40f      	push	{r0, r1, r2, r3}
 8004f8e:	b507      	push	{r0, r1, r2, lr}
 8004f90:	4906      	ldr	r1, [pc, #24]	@ (8004fac <iprintf+0x20>)
 8004f92:	ab04      	add	r3, sp, #16
 8004f94:	6808      	ldr	r0, [r1, #0]
 8004f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f9a:	6881      	ldr	r1, [r0, #8]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	f000 fadb 	bl	8005558 <_vfiprintf_r>
 8004fa2:	b003      	add	sp, #12
 8004fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fa8:	b004      	add	sp, #16
 8004faa:	4770      	bx	lr
 8004fac:	2000003c 	.word	0x2000003c

08004fb0 <_puts_r>:
 8004fb0:	6a03      	ldr	r3, [r0, #32]
 8004fb2:	b570      	push	{r4, r5, r6, lr}
 8004fb4:	6884      	ldr	r4, [r0, #8]
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	460e      	mov	r6, r1
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_puts_r+0x10>
 8004fbc:	f7ff ffb0 	bl	8004f20 <__sinit>
 8004fc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fc2:	07db      	lsls	r3, r3, #31
 8004fc4:	d405      	bmi.n	8004fd2 <_puts_r+0x22>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	0598      	lsls	r0, r3, #22
 8004fca:	d402      	bmi.n	8004fd2 <_puts_r+0x22>
 8004fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fce:	f000 f99e 	bl	800530e <__retarget_lock_acquire_recursive>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	0719      	lsls	r1, r3, #28
 8004fd6:	d502      	bpl.n	8004fde <_puts_r+0x2e>
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d135      	bne.n	800504a <_puts_r+0x9a>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f8c5 	bl	8005170 <__swsetup_r>
 8004fe6:	b380      	cbz	r0, 800504a <_puts_r+0x9a>
 8004fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fee:	07da      	lsls	r2, r3, #31
 8004ff0:	d405      	bmi.n	8004ffe <_puts_r+0x4e>
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	059b      	lsls	r3, r3, #22
 8004ff6:	d402      	bmi.n	8004ffe <_puts_r+0x4e>
 8004ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ffa:	f000 f989 	bl	8005310 <__retarget_lock_release_recursive>
 8004ffe:	4628      	mov	r0, r5
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	2b00      	cmp	r3, #0
 8005004:	da04      	bge.n	8005010 <_puts_r+0x60>
 8005006:	69a2      	ldr	r2, [r4, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	dc17      	bgt.n	800503c <_puts_r+0x8c>
 800500c:	290a      	cmp	r1, #10
 800500e:	d015      	beq.n	800503c <_puts_r+0x8c>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	6022      	str	r2, [r4, #0]
 8005016:	7019      	strb	r1, [r3, #0]
 8005018:	68a3      	ldr	r3, [r4, #8]
 800501a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800501e:	3b01      	subs	r3, #1
 8005020:	60a3      	str	r3, [r4, #8]
 8005022:	2900      	cmp	r1, #0
 8005024:	d1ed      	bne.n	8005002 <_puts_r+0x52>
 8005026:	2b00      	cmp	r3, #0
 8005028:	da11      	bge.n	800504e <_puts_r+0x9e>
 800502a:	4622      	mov	r2, r4
 800502c:	210a      	movs	r1, #10
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f85f 	bl	80050f2 <__swbuf_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d0d7      	beq.n	8004fe8 <_puts_r+0x38>
 8005038:	250a      	movs	r5, #10
 800503a:	e7d7      	b.n	8004fec <_puts_r+0x3c>
 800503c:	4622      	mov	r2, r4
 800503e:	4628      	mov	r0, r5
 8005040:	f000 f857 	bl	80050f2 <__swbuf_r>
 8005044:	3001      	adds	r0, #1
 8005046:	d1e7      	bne.n	8005018 <_puts_r+0x68>
 8005048:	e7ce      	b.n	8004fe8 <_puts_r+0x38>
 800504a:	3e01      	subs	r6, #1
 800504c:	e7e4      	b.n	8005018 <_puts_r+0x68>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	6022      	str	r2, [r4, #0]
 8005054:	220a      	movs	r2, #10
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e7ee      	b.n	8005038 <_puts_r+0x88>
	...

0800505c <puts>:
 800505c:	4b02      	ldr	r3, [pc, #8]	@ (8005068 <puts+0xc>)
 800505e:	4601      	mov	r1, r0
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	f7ff bfa5 	b.w	8004fb0 <_puts_r>
 8005066:	bf00      	nop
 8005068:	2000003c 	.word	0x2000003c

0800506c <__sread>:
 800506c:	b510      	push	{r4, lr}
 800506e:	460c      	mov	r4, r1
 8005070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005074:	f000 f8fc 	bl	8005270 <_read_r>
 8005078:	2800      	cmp	r0, #0
 800507a:	bfab      	itete	ge
 800507c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800507e:	89a3      	ldrhlt	r3, [r4, #12]
 8005080:	181b      	addge	r3, r3, r0
 8005082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005086:	bfac      	ite	ge
 8005088:	6563      	strge	r3, [r4, #84]	@ 0x54
 800508a:	81a3      	strhlt	r3, [r4, #12]
 800508c:	bd10      	pop	{r4, pc}

0800508e <__swrite>:
 800508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	461f      	mov	r7, r3
 8005094:	898b      	ldrh	r3, [r1, #12]
 8005096:	05db      	lsls	r3, r3, #23
 8005098:	4605      	mov	r5, r0
 800509a:	460c      	mov	r4, r1
 800509c:	4616      	mov	r6, r2
 800509e:	d505      	bpl.n	80050ac <__swrite+0x1e>
 80050a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a4:	2302      	movs	r3, #2
 80050a6:	2200      	movs	r2, #0
 80050a8:	f000 f8d0 	bl	800524c <_lseek_r>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	4632      	mov	r2, r6
 80050ba:	463b      	mov	r3, r7
 80050bc:	4628      	mov	r0, r5
 80050be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050c2:	f000 b8e7 	b.w	8005294 <_write_r>

080050c6 <__sseek>:
 80050c6:	b510      	push	{r4, lr}
 80050c8:	460c      	mov	r4, r1
 80050ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ce:	f000 f8bd 	bl	800524c <_lseek_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	bf15      	itete	ne
 80050d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050e2:	81a3      	strheq	r3, [r4, #12]
 80050e4:	bf18      	it	ne
 80050e6:	81a3      	strhne	r3, [r4, #12]
 80050e8:	bd10      	pop	{r4, pc}

080050ea <__sclose>:
 80050ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ee:	f000 b89d 	b.w	800522c <_close_r>

080050f2 <__swbuf_r>:
 80050f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f4:	460e      	mov	r6, r1
 80050f6:	4614      	mov	r4, r2
 80050f8:	4605      	mov	r5, r0
 80050fa:	b118      	cbz	r0, 8005104 <__swbuf_r+0x12>
 80050fc:	6a03      	ldr	r3, [r0, #32]
 80050fe:	b90b      	cbnz	r3, 8005104 <__swbuf_r+0x12>
 8005100:	f7ff ff0e 	bl	8004f20 <__sinit>
 8005104:	69a3      	ldr	r3, [r4, #24]
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	071a      	lsls	r2, r3, #28
 800510c:	d501      	bpl.n	8005112 <__swbuf_r+0x20>
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	b943      	cbnz	r3, 8005124 <__swbuf_r+0x32>
 8005112:	4621      	mov	r1, r4
 8005114:	4628      	mov	r0, r5
 8005116:	f000 f82b 	bl	8005170 <__swsetup_r>
 800511a:	b118      	cbz	r0, 8005124 <__swbuf_r+0x32>
 800511c:	f04f 37ff 	mov.w	r7, #4294967295
 8005120:	4638      	mov	r0, r7
 8005122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	6922      	ldr	r2, [r4, #16]
 8005128:	1a98      	subs	r0, r3, r2
 800512a:	6963      	ldr	r3, [r4, #20]
 800512c:	b2f6      	uxtb	r6, r6
 800512e:	4283      	cmp	r3, r0
 8005130:	4637      	mov	r7, r6
 8005132:	dc05      	bgt.n	8005140 <__swbuf_r+0x4e>
 8005134:	4621      	mov	r1, r4
 8005136:	4628      	mov	r0, r5
 8005138:	f000 fd38 	bl	8005bac <_fflush_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	d1ed      	bne.n	800511c <__swbuf_r+0x2a>
 8005140:	68a3      	ldr	r3, [r4, #8]
 8005142:	3b01      	subs	r3, #1
 8005144:	60a3      	str	r3, [r4, #8]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	6022      	str	r2, [r4, #0]
 800514c:	701e      	strb	r6, [r3, #0]
 800514e:	6962      	ldr	r2, [r4, #20]
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	429a      	cmp	r2, r3
 8005154:	d004      	beq.n	8005160 <__swbuf_r+0x6e>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	07db      	lsls	r3, r3, #31
 800515a:	d5e1      	bpl.n	8005120 <__swbuf_r+0x2e>
 800515c:	2e0a      	cmp	r6, #10
 800515e:	d1df      	bne.n	8005120 <__swbuf_r+0x2e>
 8005160:	4621      	mov	r1, r4
 8005162:	4628      	mov	r0, r5
 8005164:	f000 fd22 	bl	8005bac <_fflush_r>
 8005168:	2800      	cmp	r0, #0
 800516a:	d0d9      	beq.n	8005120 <__swbuf_r+0x2e>
 800516c:	e7d6      	b.n	800511c <__swbuf_r+0x2a>
	...

08005170 <__swsetup_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4b29      	ldr	r3, [pc, #164]	@ (8005218 <__swsetup_r+0xa8>)
 8005174:	4605      	mov	r5, r0
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	460c      	mov	r4, r1
 800517a:	b118      	cbz	r0, 8005184 <__swsetup_r+0x14>
 800517c:	6a03      	ldr	r3, [r0, #32]
 800517e:	b90b      	cbnz	r3, 8005184 <__swsetup_r+0x14>
 8005180:	f7ff fece 	bl	8004f20 <__sinit>
 8005184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d422      	bmi.n	80051d2 <__swsetup_r+0x62>
 800518c:	06da      	lsls	r2, r3, #27
 800518e:	d407      	bmi.n	80051a0 <__swsetup_r+0x30>
 8005190:	2209      	movs	r2, #9
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	e033      	b.n	8005208 <__swsetup_r+0x98>
 80051a0:	0758      	lsls	r0, r3, #29
 80051a2:	d512      	bpl.n	80051ca <__swsetup_r+0x5a>
 80051a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051a6:	b141      	cbz	r1, 80051ba <__swsetup_r+0x4a>
 80051a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051ac:	4299      	cmp	r1, r3
 80051ae:	d002      	beq.n	80051b6 <__swsetup_r+0x46>
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 f8af 	bl	8005314 <_free_r>
 80051b6:	2300      	movs	r3, #0
 80051b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	2300      	movs	r3, #0
 80051c4:	6063      	str	r3, [r4, #4]
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	b94b      	cbnz	r3, 80051ea <__swsetup_r+0x7a>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e0:	d003      	beq.n	80051ea <__swsetup_r+0x7a>
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 fd2f 	bl	8005c48 <__smakebuf_r>
 80051ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ee:	f013 0201 	ands.w	r2, r3, #1
 80051f2:	d00a      	beq.n	800520a <__swsetup_r+0x9a>
 80051f4:	2200      	movs	r2, #0
 80051f6:	60a2      	str	r2, [r4, #8]
 80051f8:	6962      	ldr	r2, [r4, #20]
 80051fa:	4252      	negs	r2, r2
 80051fc:	61a2      	str	r2, [r4, #24]
 80051fe:	6922      	ldr	r2, [r4, #16]
 8005200:	b942      	cbnz	r2, 8005214 <__swsetup_r+0xa4>
 8005202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005206:	d1c5      	bne.n	8005194 <__swsetup_r+0x24>
 8005208:	bd38      	pop	{r3, r4, r5, pc}
 800520a:	0799      	lsls	r1, r3, #30
 800520c:	bf58      	it	pl
 800520e:	6962      	ldrpl	r2, [r4, #20]
 8005210:	60a2      	str	r2, [r4, #8]
 8005212:	e7f4      	b.n	80051fe <__swsetup_r+0x8e>
 8005214:	2000      	movs	r0, #0
 8005216:	e7f7      	b.n	8005208 <__swsetup_r+0x98>
 8005218:	2000003c 	.word	0x2000003c

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <_close_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d06      	ldr	r5, [pc, #24]	@ (8005248 <_close_r+0x1c>)
 8005230:	2300      	movs	r3, #0
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	f7fc fa19 	bl	800166e <_close>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_close_r+0x1a>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_close_r+0x1a>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	2000038c 	.word	0x2000038c

0800524c <_lseek_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	@ (800526c <_lseek_r+0x20>)
 8005250:	4604      	mov	r4, r0
 8005252:	4608      	mov	r0, r1
 8005254:	4611      	mov	r1, r2
 8005256:	2200      	movs	r2, #0
 8005258:	602a      	str	r2, [r5, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f7fc fa2e 	bl	80016bc <_lseek>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_lseek_r+0x1e>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_lseek_r+0x1e>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	2000038c 	.word	0x2000038c

08005270 <_read_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d07      	ldr	r5, [pc, #28]	@ (8005290 <_read_r+0x20>)
 8005274:	4604      	mov	r4, r0
 8005276:	4608      	mov	r0, r1
 8005278:	4611      	mov	r1, r2
 800527a:	2200      	movs	r2, #0
 800527c:	602a      	str	r2, [r5, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f7fc f9d8 	bl	8001634 <_read>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_read_r+0x1e>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_read_r+0x1e>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	2000038c 	.word	0x2000038c

08005294 <_write_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d07      	ldr	r5, [pc, #28]	@ (80052b4 <_write_r+0x20>)
 8005298:	4604      	mov	r4, r0
 800529a:	4608      	mov	r0, r1
 800529c:	4611      	mov	r1, r2
 800529e:	2200      	movs	r2, #0
 80052a0:	602a      	str	r2, [r5, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f7fb fe3a 	bl	8000f1c <_write>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_write_r+0x1e>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_write_r+0x1e>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	2000038c 	.word	0x2000038c

080052b8 <__errno>:
 80052b8:	4b01      	ldr	r3, [pc, #4]	@ (80052c0 <__errno+0x8>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	2000003c 	.word	0x2000003c

080052c4 <__libc_init_array>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4d0d      	ldr	r5, [pc, #52]	@ (80052fc <__libc_init_array+0x38>)
 80052c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005300 <__libc_init_array+0x3c>)
 80052ca:	1b64      	subs	r4, r4, r5
 80052cc:	10a4      	asrs	r4, r4, #2
 80052ce:	2600      	movs	r6, #0
 80052d0:	42a6      	cmp	r6, r4
 80052d2:	d109      	bne.n	80052e8 <__libc_init_array+0x24>
 80052d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005304 <__libc_init_array+0x40>)
 80052d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005308 <__libc_init_array+0x44>)
 80052d8:	f000 fd24 	bl	8005d24 <_init>
 80052dc:	1b64      	subs	r4, r4, r5
 80052de:	10a4      	asrs	r4, r4, #2
 80052e0:	2600      	movs	r6, #0
 80052e2:	42a6      	cmp	r6, r4
 80052e4:	d105      	bne.n	80052f2 <__libc_init_array+0x2e>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ec:	4798      	blx	r3
 80052ee:	3601      	adds	r6, #1
 80052f0:	e7ee      	b.n	80052d0 <__libc_init_array+0xc>
 80052f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f6:	4798      	blx	r3
 80052f8:	3601      	adds	r6, #1
 80052fa:	e7f2      	b.n	80052e2 <__libc_init_array+0x1e>
 80052fc:	08005fc8 	.word	0x08005fc8
 8005300:	08005fc8 	.word	0x08005fc8
 8005304:	08005fc8 	.word	0x08005fc8
 8005308:	08005fcc 	.word	0x08005fcc

0800530c <__retarget_lock_init_recursive>:
 800530c:	4770      	bx	lr

0800530e <__retarget_lock_acquire_recursive>:
 800530e:	4770      	bx	lr

08005310 <__retarget_lock_release_recursive>:
 8005310:	4770      	bx	lr
	...

08005314 <_free_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4605      	mov	r5, r0
 8005318:	2900      	cmp	r1, #0
 800531a:	d041      	beq.n	80053a0 <_free_r+0x8c>
 800531c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005320:	1f0c      	subs	r4, r1, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfb8      	it	lt
 8005326:	18e4      	addlt	r4, r4, r3
 8005328:	f000 f8e0 	bl	80054ec <__malloc_lock>
 800532c:	4a1d      	ldr	r2, [pc, #116]	@ (80053a4 <_free_r+0x90>)
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	b933      	cbnz	r3, 8005340 <_free_r+0x2c>
 8005332:	6063      	str	r3, [r4, #4]
 8005334:	6014      	str	r4, [r2, #0]
 8005336:	4628      	mov	r0, r5
 8005338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800533c:	f000 b8dc 	b.w	80054f8 <__malloc_unlock>
 8005340:	42a3      	cmp	r3, r4
 8005342:	d908      	bls.n	8005356 <_free_r+0x42>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	1821      	adds	r1, r4, r0
 8005348:	428b      	cmp	r3, r1
 800534a:	bf01      	itttt	eq
 800534c:	6819      	ldreq	r1, [r3, #0]
 800534e:	685b      	ldreq	r3, [r3, #4]
 8005350:	1809      	addeq	r1, r1, r0
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	e7ed      	b.n	8005332 <_free_r+0x1e>
 8005356:	461a      	mov	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b10b      	cbz	r3, 8005360 <_free_r+0x4c>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d9fa      	bls.n	8005356 <_free_r+0x42>
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	1850      	adds	r0, r2, r1
 8005364:	42a0      	cmp	r0, r4
 8005366:	d10b      	bne.n	8005380 <_free_r+0x6c>
 8005368:	6820      	ldr	r0, [r4, #0]
 800536a:	4401      	add	r1, r0
 800536c:	1850      	adds	r0, r2, r1
 800536e:	4283      	cmp	r3, r0
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	d1e0      	bne.n	8005336 <_free_r+0x22>
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	6053      	str	r3, [r2, #4]
 800537a:	4408      	add	r0, r1
 800537c:	6010      	str	r0, [r2, #0]
 800537e:	e7da      	b.n	8005336 <_free_r+0x22>
 8005380:	d902      	bls.n	8005388 <_free_r+0x74>
 8005382:	230c      	movs	r3, #12
 8005384:	602b      	str	r3, [r5, #0]
 8005386:	e7d6      	b.n	8005336 <_free_r+0x22>
 8005388:	6820      	ldr	r0, [r4, #0]
 800538a:	1821      	adds	r1, r4, r0
 800538c:	428b      	cmp	r3, r1
 800538e:	bf04      	itt	eq
 8005390:	6819      	ldreq	r1, [r3, #0]
 8005392:	685b      	ldreq	r3, [r3, #4]
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	bf04      	itt	eq
 8005398:	1809      	addeq	r1, r1, r0
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	6054      	str	r4, [r2, #4]
 800539e:	e7ca      	b.n	8005336 <_free_r+0x22>
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
 80053a2:	bf00      	nop
 80053a4:	20000398 	.word	0x20000398

080053a8 <sbrk_aligned>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4e0f      	ldr	r6, [pc, #60]	@ (80053e8 <sbrk_aligned+0x40>)
 80053ac:	460c      	mov	r4, r1
 80053ae:	6831      	ldr	r1, [r6, #0]
 80053b0:	4605      	mov	r5, r0
 80053b2:	b911      	cbnz	r1, 80053ba <sbrk_aligned+0x12>
 80053b4:	f000 fca6 	bl	8005d04 <_sbrk_r>
 80053b8:	6030      	str	r0, [r6, #0]
 80053ba:	4621      	mov	r1, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 fca1 	bl	8005d04 <_sbrk_r>
 80053c2:	1c43      	adds	r3, r0, #1
 80053c4:	d103      	bne.n	80053ce <sbrk_aligned+0x26>
 80053c6:	f04f 34ff 	mov.w	r4, #4294967295
 80053ca:	4620      	mov	r0, r4
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	1cc4      	adds	r4, r0, #3
 80053d0:	f024 0403 	bic.w	r4, r4, #3
 80053d4:	42a0      	cmp	r0, r4
 80053d6:	d0f8      	beq.n	80053ca <sbrk_aligned+0x22>
 80053d8:	1a21      	subs	r1, r4, r0
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 fc92 	bl	8005d04 <_sbrk_r>
 80053e0:	3001      	adds	r0, #1
 80053e2:	d1f2      	bne.n	80053ca <sbrk_aligned+0x22>
 80053e4:	e7ef      	b.n	80053c6 <sbrk_aligned+0x1e>
 80053e6:	bf00      	nop
 80053e8:	20000394 	.word	0x20000394

080053ec <_malloc_r>:
 80053ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f0:	1ccd      	adds	r5, r1, #3
 80053f2:	f025 0503 	bic.w	r5, r5, #3
 80053f6:	3508      	adds	r5, #8
 80053f8:	2d0c      	cmp	r5, #12
 80053fa:	bf38      	it	cc
 80053fc:	250c      	movcc	r5, #12
 80053fe:	2d00      	cmp	r5, #0
 8005400:	4606      	mov	r6, r0
 8005402:	db01      	blt.n	8005408 <_malloc_r+0x1c>
 8005404:	42a9      	cmp	r1, r5
 8005406:	d904      	bls.n	8005412 <_malloc_r+0x26>
 8005408:	230c      	movs	r3, #12
 800540a:	6033      	str	r3, [r6, #0]
 800540c:	2000      	movs	r0, #0
 800540e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054e8 <_malloc_r+0xfc>
 8005416:	f000 f869 	bl	80054ec <__malloc_lock>
 800541a:	f8d8 3000 	ldr.w	r3, [r8]
 800541e:	461c      	mov	r4, r3
 8005420:	bb44      	cbnz	r4, 8005474 <_malloc_r+0x88>
 8005422:	4629      	mov	r1, r5
 8005424:	4630      	mov	r0, r6
 8005426:	f7ff ffbf 	bl	80053a8 <sbrk_aligned>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	4604      	mov	r4, r0
 800542e:	d158      	bne.n	80054e2 <_malloc_r+0xf6>
 8005430:	f8d8 4000 	ldr.w	r4, [r8]
 8005434:	4627      	mov	r7, r4
 8005436:	2f00      	cmp	r7, #0
 8005438:	d143      	bne.n	80054c2 <_malloc_r+0xd6>
 800543a:	2c00      	cmp	r4, #0
 800543c:	d04b      	beq.n	80054d6 <_malloc_r+0xea>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	4639      	mov	r1, r7
 8005442:	4630      	mov	r0, r6
 8005444:	eb04 0903 	add.w	r9, r4, r3
 8005448:	f000 fc5c 	bl	8005d04 <_sbrk_r>
 800544c:	4581      	cmp	r9, r0
 800544e:	d142      	bne.n	80054d6 <_malloc_r+0xea>
 8005450:	6821      	ldr	r1, [r4, #0]
 8005452:	1a6d      	subs	r5, r5, r1
 8005454:	4629      	mov	r1, r5
 8005456:	4630      	mov	r0, r6
 8005458:	f7ff ffa6 	bl	80053a8 <sbrk_aligned>
 800545c:	3001      	adds	r0, #1
 800545e:	d03a      	beq.n	80054d6 <_malloc_r+0xea>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	442b      	add	r3, r5
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	f8d8 3000 	ldr.w	r3, [r8]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	bb62      	cbnz	r2, 80054c8 <_malloc_r+0xdc>
 800546e:	f8c8 7000 	str.w	r7, [r8]
 8005472:	e00f      	b.n	8005494 <_malloc_r+0xa8>
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	1b52      	subs	r2, r2, r5
 8005478:	d420      	bmi.n	80054bc <_malloc_r+0xd0>
 800547a:	2a0b      	cmp	r2, #11
 800547c:	d917      	bls.n	80054ae <_malloc_r+0xc2>
 800547e:	1961      	adds	r1, r4, r5
 8005480:	42a3      	cmp	r3, r4
 8005482:	6025      	str	r5, [r4, #0]
 8005484:	bf18      	it	ne
 8005486:	6059      	strne	r1, [r3, #4]
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	bf08      	it	eq
 800548c:	f8c8 1000 	streq.w	r1, [r8]
 8005490:	5162      	str	r2, [r4, r5]
 8005492:	604b      	str	r3, [r1, #4]
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f82f 	bl	80054f8 <__malloc_unlock>
 800549a:	f104 000b 	add.w	r0, r4, #11
 800549e:	1d23      	adds	r3, r4, #4
 80054a0:	f020 0007 	bic.w	r0, r0, #7
 80054a4:	1ac2      	subs	r2, r0, r3
 80054a6:	bf1c      	itt	ne
 80054a8:	1a1b      	subne	r3, r3, r0
 80054aa:	50a3      	strne	r3, [r4, r2]
 80054ac:	e7af      	b.n	800540e <_malloc_r+0x22>
 80054ae:	6862      	ldr	r2, [r4, #4]
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	bf0c      	ite	eq
 80054b4:	f8c8 2000 	streq.w	r2, [r8]
 80054b8:	605a      	strne	r2, [r3, #4]
 80054ba:	e7eb      	b.n	8005494 <_malloc_r+0xa8>
 80054bc:	4623      	mov	r3, r4
 80054be:	6864      	ldr	r4, [r4, #4]
 80054c0:	e7ae      	b.n	8005420 <_malloc_r+0x34>
 80054c2:	463c      	mov	r4, r7
 80054c4:	687f      	ldr	r7, [r7, #4]
 80054c6:	e7b6      	b.n	8005436 <_malloc_r+0x4a>
 80054c8:	461a      	mov	r2, r3
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d1fb      	bne.n	80054c8 <_malloc_r+0xdc>
 80054d0:	2300      	movs	r3, #0
 80054d2:	6053      	str	r3, [r2, #4]
 80054d4:	e7de      	b.n	8005494 <_malloc_r+0xa8>
 80054d6:	230c      	movs	r3, #12
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	4630      	mov	r0, r6
 80054dc:	f000 f80c 	bl	80054f8 <__malloc_unlock>
 80054e0:	e794      	b.n	800540c <_malloc_r+0x20>
 80054e2:	6005      	str	r5, [r0, #0]
 80054e4:	e7d6      	b.n	8005494 <_malloc_r+0xa8>
 80054e6:	bf00      	nop
 80054e8:	20000398 	.word	0x20000398

080054ec <__malloc_lock>:
 80054ec:	4801      	ldr	r0, [pc, #4]	@ (80054f4 <__malloc_lock+0x8>)
 80054ee:	f7ff bf0e 	b.w	800530e <__retarget_lock_acquire_recursive>
 80054f2:	bf00      	nop
 80054f4:	20000390 	.word	0x20000390

080054f8 <__malloc_unlock>:
 80054f8:	4801      	ldr	r0, [pc, #4]	@ (8005500 <__malloc_unlock+0x8>)
 80054fa:	f7ff bf09 	b.w	8005310 <__retarget_lock_release_recursive>
 80054fe:	bf00      	nop
 8005500:	20000390 	.word	0x20000390

08005504 <__sfputc_r>:
 8005504:	6893      	ldr	r3, [r2, #8]
 8005506:	3b01      	subs	r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	b410      	push	{r4}
 800550c:	6093      	str	r3, [r2, #8]
 800550e:	da08      	bge.n	8005522 <__sfputc_r+0x1e>
 8005510:	6994      	ldr	r4, [r2, #24]
 8005512:	42a3      	cmp	r3, r4
 8005514:	db01      	blt.n	800551a <__sfputc_r+0x16>
 8005516:	290a      	cmp	r1, #10
 8005518:	d103      	bne.n	8005522 <__sfputc_r+0x1e>
 800551a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551e:	f7ff bde8 	b.w	80050f2 <__swbuf_r>
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	1c58      	adds	r0, r3, #1
 8005526:	6010      	str	r0, [r2, #0]
 8005528:	7019      	strb	r1, [r3, #0]
 800552a:	4608      	mov	r0, r1
 800552c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005530:	4770      	bx	lr

08005532 <__sfputs_r>:
 8005532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005534:	4606      	mov	r6, r0
 8005536:	460f      	mov	r7, r1
 8005538:	4614      	mov	r4, r2
 800553a:	18d5      	adds	r5, r2, r3
 800553c:	42ac      	cmp	r4, r5
 800553e:	d101      	bne.n	8005544 <__sfputs_r+0x12>
 8005540:	2000      	movs	r0, #0
 8005542:	e007      	b.n	8005554 <__sfputs_r+0x22>
 8005544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005548:	463a      	mov	r2, r7
 800554a:	4630      	mov	r0, r6
 800554c:	f7ff ffda 	bl	8005504 <__sfputc_r>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d1f3      	bne.n	800553c <__sfputs_r+0xa>
 8005554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005558 <_vfiprintf_r>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	460d      	mov	r5, r1
 800555e:	b09d      	sub	sp, #116	@ 0x74
 8005560:	4614      	mov	r4, r2
 8005562:	4698      	mov	r8, r3
 8005564:	4606      	mov	r6, r0
 8005566:	b118      	cbz	r0, 8005570 <_vfiprintf_r+0x18>
 8005568:	6a03      	ldr	r3, [r0, #32]
 800556a:	b90b      	cbnz	r3, 8005570 <_vfiprintf_r+0x18>
 800556c:	f7ff fcd8 	bl	8004f20 <__sinit>
 8005570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005572:	07d9      	lsls	r1, r3, #31
 8005574:	d405      	bmi.n	8005582 <_vfiprintf_r+0x2a>
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	059a      	lsls	r2, r3, #22
 800557a:	d402      	bmi.n	8005582 <_vfiprintf_r+0x2a>
 800557c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800557e:	f7ff fec6 	bl	800530e <__retarget_lock_acquire_recursive>
 8005582:	89ab      	ldrh	r3, [r5, #12]
 8005584:	071b      	lsls	r3, r3, #28
 8005586:	d501      	bpl.n	800558c <_vfiprintf_r+0x34>
 8005588:	692b      	ldr	r3, [r5, #16]
 800558a:	b99b      	cbnz	r3, 80055b4 <_vfiprintf_r+0x5c>
 800558c:	4629      	mov	r1, r5
 800558e:	4630      	mov	r0, r6
 8005590:	f7ff fdee 	bl	8005170 <__swsetup_r>
 8005594:	b170      	cbz	r0, 80055b4 <_vfiprintf_r+0x5c>
 8005596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005598:	07dc      	lsls	r4, r3, #31
 800559a:	d504      	bpl.n	80055a6 <_vfiprintf_r+0x4e>
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	b01d      	add	sp, #116	@ 0x74
 80055a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	0598      	lsls	r0, r3, #22
 80055aa:	d4f7      	bmi.n	800559c <_vfiprintf_r+0x44>
 80055ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055ae:	f7ff feaf 	bl	8005310 <__retarget_lock_release_recursive>
 80055b2:	e7f3      	b.n	800559c <_vfiprintf_r+0x44>
 80055b4:	2300      	movs	r3, #0
 80055b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b8:	2320      	movs	r3, #32
 80055ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055be:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c2:	2330      	movs	r3, #48	@ 0x30
 80055c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005774 <_vfiprintf_r+0x21c>
 80055c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055cc:	f04f 0901 	mov.w	r9, #1
 80055d0:	4623      	mov	r3, r4
 80055d2:	469a      	mov	sl, r3
 80055d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055d8:	b10a      	cbz	r2, 80055de <_vfiprintf_r+0x86>
 80055da:	2a25      	cmp	r2, #37	@ 0x25
 80055dc:	d1f9      	bne.n	80055d2 <_vfiprintf_r+0x7a>
 80055de:	ebba 0b04 	subs.w	fp, sl, r4
 80055e2:	d00b      	beq.n	80055fc <_vfiprintf_r+0xa4>
 80055e4:	465b      	mov	r3, fp
 80055e6:	4622      	mov	r2, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	4630      	mov	r0, r6
 80055ec:	f7ff ffa1 	bl	8005532 <__sfputs_r>
 80055f0:	3001      	adds	r0, #1
 80055f2:	f000 80a7 	beq.w	8005744 <_vfiprintf_r+0x1ec>
 80055f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055f8:	445a      	add	r2, fp
 80055fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80055fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 809f 	beq.w	8005744 <_vfiprintf_r+0x1ec>
 8005606:	2300      	movs	r3, #0
 8005608:	f04f 32ff 	mov.w	r2, #4294967295
 800560c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005610:	f10a 0a01 	add.w	sl, sl, #1
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	9307      	str	r3, [sp, #28]
 8005618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800561c:	931a      	str	r3, [sp, #104]	@ 0x68
 800561e:	4654      	mov	r4, sl
 8005620:	2205      	movs	r2, #5
 8005622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005626:	4853      	ldr	r0, [pc, #332]	@ (8005774 <_vfiprintf_r+0x21c>)
 8005628:	f7fa fdda 	bl	80001e0 <memchr>
 800562c:	9a04      	ldr	r2, [sp, #16]
 800562e:	b9d8      	cbnz	r0, 8005668 <_vfiprintf_r+0x110>
 8005630:	06d1      	lsls	r1, r2, #27
 8005632:	bf44      	itt	mi
 8005634:	2320      	movmi	r3, #32
 8005636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800563a:	0713      	lsls	r3, r2, #28
 800563c:	bf44      	itt	mi
 800563e:	232b      	movmi	r3, #43	@ 0x2b
 8005640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005644:	f89a 3000 	ldrb.w	r3, [sl]
 8005648:	2b2a      	cmp	r3, #42	@ 0x2a
 800564a:	d015      	beq.n	8005678 <_vfiprintf_r+0x120>
 800564c:	9a07      	ldr	r2, [sp, #28]
 800564e:	4654      	mov	r4, sl
 8005650:	2000      	movs	r0, #0
 8005652:	f04f 0c0a 	mov.w	ip, #10
 8005656:	4621      	mov	r1, r4
 8005658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800565c:	3b30      	subs	r3, #48	@ 0x30
 800565e:	2b09      	cmp	r3, #9
 8005660:	d94b      	bls.n	80056fa <_vfiprintf_r+0x1a2>
 8005662:	b1b0      	cbz	r0, 8005692 <_vfiprintf_r+0x13a>
 8005664:	9207      	str	r2, [sp, #28]
 8005666:	e014      	b.n	8005692 <_vfiprintf_r+0x13a>
 8005668:	eba0 0308 	sub.w	r3, r0, r8
 800566c:	fa09 f303 	lsl.w	r3, r9, r3
 8005670:	4313      	orrs	r3, r2
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	46a2      	mov	sl, r4
 8005676:	e7d2      	b.n	800561e <_vfiprintf_r+0xc6>
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	1d19      	adds	r1, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	9103      	str	r1, [sp, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	bfbb      	ittet	lt
 8005684:	425b      	neglt	r3, r3
 8005686:	f042 0202 	orrlt.w	r2, r2, #2
 800568a:	9307      	strge	r3, [sp, #28]
 800568c:	9307      	strlt	r3, [sp, #28]
 800568e:	bfb8      	it	lt
 8005690:	9204      	strlt	r2, [sp, #16]
 8005692:	7823      	ldrb	r3, [r4, #0]
 8005694:	2b2e      	cmp	r3, #46	@ 0x2e
 8005696:	d10a      	bne.n	80056ae <_vfiprintf_r+0x156>
 8005698:	7863      	ldrb	r3, [r4, #1]
 800569a:	2b2a      	cmp	r3, #42	@ 0x2a
 800569c:	d132      	bne.n	8005704 <_vfiprintf_r+0x1ac>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	1d1a      	adds	r2, r3, #4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	9203      	str	r2, [sp, #12]
 80056a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056aa:	3402      	adds	r4, #2
 80056ac:	9305      	str	r3, [sp, #20]
 80056ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005784 <_vfiprintf_r+0x22c>
 80056b2:	7821      	ldrb	r1, [r4, #0]
 80056b4:	2203      	movs	r2, #3
 80056b6:	4650      	mov	r0, sl
 80056b8:	f7fa fd92 	bl	80001e0 <memchr>
 80056bc:	b138      	cbz	r0, 80056ce <_vfiprintf_r+0x176>
 80056be:	9b04      	ldr	r3, [sp, #16]
 80056c0:	eba0 000a 	sub.w	r0, r0, sl
 80056c4:	2240      	movs	r2, #64	@ 0x40
 80056c6:	4082      	lsls	r2, r0
 80056c8:	4313      	orrs	r3, r2
 80056ca:	3401      	adds	r4, #1
 80056cc:	9304      	str	r3, [sp, #16]
 80056ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d2:	4829      	ldr	r0, [pc, #164]	@ (8005778 <_vfiprintf_r+0x220>)
 80056d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056d8:	2206      	movs	r2, #6
 80056da:	f7fa fd81 	bl	80001e0 <memchr>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d03f      	beq.n	8005762 <_vfiprintf_r+0x20a>
 80056e2:	4b26      	ldr	r3, [pc, #152]	@ (800577c <_vfiprintf_r+0x224>)
 80056e4:	bb1b      	cbnz	r3, 800572e <_vfiprintf_r+0x1d6>
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	3307      	adds	r3, #7
 80056ea:	f023 0307 	bic.w	r3, r3, #7
 80056ee:	3308      	adds	r3, #8
 80056f0:	9303      	str	r3, [sp, #12]
 80056f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f4:	443b      	add	r3, r7
 80056f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80056f8:	e76a      	b.n	80055d0 <_vfiprintf_r+0x78>
 80056fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80056fe:	460c      	mov	r4, r1
 8005700:	2001      	movs	r0, #1
 8005702:	e7a8      	b.n	8005656 <_vfiprintf_r+0xfe>
 8005704:	2300      	movs	r3, #0
 8005706:	3401      	adds	r4, #1
 8005708:	9305      	str	r3, [sp, #20]
 800570a:	4619      	mov	r1, r3
 800570c:	f04f 0c0a 	mov.w	ip, #10
 8005710:	4620      	mov	r0, r4
 8005712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005716:	3a30      	subs	r2, #48	@ 0x30
 8005718:	2a09      	cmp	r2, #9
 800571a:	d903      	bls.n	8005724 <_vfiprintf_r+0x1cc>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0c6      	beq.n	80056ae <_vfiprintf_r+0x156>
 8005720:	9105      	str	r1, [sp, #20]
 8005722:	e7c4      	b.n	80056ae <_vfiprintf_r+0x156>
 8005724:	fb0c 2101 	mla	r1, ip, r1, r2
 8005728:	4604      	mov	r4, r0
 800572a:	2301      	movs	r3, #1
 800572c:	e7f0      	b.n	8005710 <_vfiprintf_r+0x1b8>
 800572e:	ab03      	add	r3, sp, #12
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	462a      	mov	r2, r5
 8005734:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <_vfiprintf_r+0x228>)
 8005736:	a904      	add	r1, sp, #16
 8005738:	4630      	mov	r0, r6
 800573a:	f3af 8000 	nop.w
 800573e:	4607      	mov	r7, r0
 8005740:	1c78      	adds	r0, r7, #1
 8005742:	d1d6      	bne.n	80056f2 <_vfiprintf_r+0x19a>
 8005744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005746:	07d9      	lsls	r1, r3, #31
 8005748:	d405      	bmi.n	8005756 <_vfiprintf_r+0x1fe>
 800574a:	89ab      	ldrh	r3, [r5, #12]
 800574c:	059a      	lsls	r2, r3, #22
 800574e:	d402      	bmi.n	8005756 <_vfiprintf_r+0x1fe>
 8005750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005752:	f7ff fddd 	bl	8005310 <__retarget_lock_release_recursive>
 8005756:	89ab      	ldrh	r3, [r5, #12]
 8005758:	065b      	lsls	r3, r3, #25
 800575a:	f53f af1f 	bmi.w	800559c <_vfiprintf_r+0x44>
 800575e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005760:	e71e      	b.n	80055a0 <_vfiprintf_r+0x48>
 8005762:	ab03      	add	r3, sp, #12
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	462a      	mov	r2, r5
 8005768:	4b05      	ldr	r3, [pc, #20]	@ (8005780 <_vfiprintf_r+0x228>)
 800576a:	a904      	add	r1, sp, #16
 800576c:	4630      	mov	r0, r6
 800576e:	f000 f879 	bl	8005864 <_printf_i>
 8005772:	e7e4      	b.n	800573e <_vfiprintf_r+0x1e6>
 8005774:	08005f8c 	.word	0x08005f8c
 8005778:	08005f96 	.word	0x08005f96
 800577c:	00000000 	.word	0x00000000
 8005780:	08005533 	.word	0x08005533
 8005784:	08005f92 	.word	0x08005f92

08005788 <_printf_common>:
 8005788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	4616      	mov	r6, r2
 800578e:	4698      	mov	r8, r3
 8005790:	688a      	ldr	r2, [r1, #8]
 8005792:	690b      	ldr	r3, [r1, #16]
 8005794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005798:	4293      	cmp	r3, r2
 800579a:	bfb8      	it	lt
 800579c:	4613      	movlt	r3, r2
 800579e:	6033      	str	r3, [r6, #0]
 80057a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057a4:	4607      	mov	r7, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	b10a      	cbz	r2, 80057ae <_printf_common+0x26>
 80057aa:	3301      	adds	r3, #1
 80057ac:	6033      	str	r3, [r6, #0]
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	0699      	lsls	r1, r3, #26
 80057b2:	bf42      	ittt	mi
 80057b4:	6833      	ldrmi	r3, [r6, #0]
 80057b6:	3302      	addmi	r3, #2
 80057b8:	6033      	strmi	r3, [r6, #0]
 80057ba:	6825      	ldr	r5, [r4, #0]
 80057bc:	f015 0506 	ands.w	r5, r5, #6
 80057c0:	d106      	bne.n	80057d0 <_printf_common+0x48>
 80057c2:	f104 0a19 	add.w	sl, r4, #25
 80057c6:	68e3      	ldr	r3, [r4, #12]
 80057c8:	6832      	ldr	r2, [r6, #0]
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	dc26      	bgt.n	800581e <_printf_common+0x96>
 80057d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057d4:	6822      	ldr	r2, [r4, #0]
 80057d6:	3b00      	subs	r3, #0
 80057d8:	bf18      	it	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	0692      	lsls	r2, r2, #26
 80057de:	d42b      	bmi.n	8005838 <_printf_common+0xb0>
 80057e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057e4:	4641      	mov	r1, r8
 80057e6:	4638      	mov	r0, r7
 80057e8:	47c8      	blx	r9
 80057ea:	3001      	adds	r0, #1
 80057ec:	d01e      	beq.n	800582c <_printf_common+0xa4>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	6922      	ldr	r2, [r4, #16]
 80057f2:	f003 0306 	and.w	r3, r3, #6
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	bf02      	ittt	eq
 80057fa:	68e5      	ldreq	r5, [r4, #12]
 80057fc:	6833      	ldreq	r3, [r6, #0]
 80057fe:	1aed      	subeq	r5, r5, r3
 8005800:	68a3      	ldr	r3, [r4, #8]
 8005802:	bf0c      	ite	eq
 8005804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005808:	2500      	movne	r5, #0
 800580a:	4293      	cmp	r3, r2
 800580c:	bfc4      	itt	gt
 800580e:	1a9b      	subgt	r3, r3, r2
 8005810:	18ed      	addgt	r5, r5, r3
 8005812:	2600      	movs	r6, #0
 8005814:	341a      	adds	r4, #26
 8005816:	42b5      	cmp	r5, r6
 8005818:	d11a      	bne.n	8005850 <_printf_common+0xc8>
 800581a:	2000      	movs	r0, #0
 800581c:	e008      	b.n	8005830 <_printf_common+0xa8>
 800581e:	2301      	movs	r3, #1
 8005820:	4652      	mov	r2, sl
 8005822:	4641      	mov	r1, r8
 8005824:	4638      	mov	r0, r7
 8005826:	47c8      	blx	r9
 8005828:	3001      	adds	r0, #1
 800582a:	d103      	bne.n	8005834 <_printf_common+0xac>
 800582c:	f04f 30ff 	mov.w	r0, #4294967295
 8005830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005834:	3501      	adds	r5, #1
 8005836:	e7c6      	b.n	80057c6 <_printf_common+0x3e>
 8005838:	18e1      	adds	r1, r4, r3
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	2030      	movs	r0, #48	@ 0x30
 800583e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005842:	4422      	add	r2, r4
 8005844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800584c:	3302      	adds	r3, #2
 800584e:	e7c7      	b.n	80057e0 <_printf_common+0x58>
 8005850:	2301      	movs	r3, #1
 8005852:	4622      	mov	r2, r4
 8005854:	4641      	mov	r1, r8
 8005856:	4638      	mov	r0, r7
 8005858:	47c8      	blx	r9
 800585a:	3001      	adds	r0, #1
 800585c:	d0e6      	beq.n	800582c <_printf_common+0xa4>
 800585e:	3601      	adds	r6, #1
 8005860:	e7d9      	b.n	8005816 <_printf_common+0x8e>
	...

08005864 <_printf_i>:
 8005864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	7e0f      	ldrb	r7, [r1, #24]
 800586a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800586c:	2f78      	cmp	r7, #120	@ 0x78
 800586e:	4691      	mov	r9, r2
 8005870:	4680      	mov	r8, r0
 8005872:	460c      	mov	r4, r1
 8005874:	469a      	mov	sl, r3
 8005876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800587a:	d807      	bhi.n	800588c <_printf_i+0x28>
 800587c:	2f62      	cmp	r7, #98	@ 0x62
 800587e:	d80a      	bhi.n	8005896 <_printf_i+0x32>
 8005880:	2f00      	cmp	r7, #0
 8005882:	f000 80d2 	beq.w	8005a2a <_printf_i+0x1c6>
 8005886:	2f58      	cmp	r7, #88	@ 0x58
 8005888:	f000 80b9 	beq.w	80059fe <_printf_i+0x19a>
 800588c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005894:	e03a      	b.n	800590c <_printf_i+0xa8>
 8005896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800589a:	2b15      	cmp	r3, #21
 800589c:	d8f6      	bhi.n	800588c <_printf_i+0x28>
 800589e:	a101      	add	r1, pc, #4	@ (adr r1, 80058a4 <_printf_i+0x40>)
 80058a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a4:	080058fd 	.word	0x080058fd
 80058a8:	08005911 	.word	0x08005911
 80058ac:	0800588d 	.word	0x0800588d
 80058b0:	0800588d 	.word	0x0800588d
 80058b4:	0800588d 	.word	0x0800588d
 80058b8:	0800588d 	.word	0x0800588d
 80058bc:	08005911 	.word	0x08005911
 80058c0:	0800588d 	.word	0x0800588d
 80058c4:	0800588d 	.word	0x0800588d
 80058c8:	0800588d 	.word	0x0800588d
 80058cc:	0800588d 	.word	0x0800588d
 80058d0:	08005a11 	.word	0x08005a11
 80058d4:	0800593b 	.word	0x0800593b
 80058d8:	080059cb 	.word	0x080059cb
 80058dc:	0800588d 	.word	0x0800588d
 80058e0:	0800588d 	.word	0x0800588d
 80058e4:	08005a33 	.word	0x08005a33
 80058e8:	0800588d 	.word	0x0800588d
 80058ec:	0800593b 	.word	0x0800593b
 80058f0:	0800588d 	.word	0x0800588d
 80058f4:	0800588d 	.word	0x0800588d
 80058f8:	080059d3 	.word	0x080059d3
 80058fc:	6833      	ldr	r3, [r6, #0]
 80058fe:	1d1a      	adds	r2, r3, #4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6032      	str	r2, [r6, #0]
 8005904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800590c:	2301      	movs	r3, #1
 800590e:	e09d      	b.n	8005a4c <_printf_i+0x1e8>
 8005910:	6833      	ldr	r3, [r6, #0]
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	1d19      	adds	r1, r3, #4
 8005916:	6031      	str	r1, [r6, #0]
 8005918:	0606      	lsls	r6, r0, #24
 800591a:	d501      	bpl.n	8005920 <_printf_i+0xbc>
 800591c:	681d      	ldr	r5, [r3, #0]
 800591e:	e003      	b.n	8005928 <_printf_i+0xc4>
 8005920:	0645      	lsls	r5, r0, #25
 8005922:	d5fb      	bpl.n	800591c <_printf_i+0xb8>
 8005924:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005928:	2d00      	cmp	r5, #0
 800592a:	da03      	bge.n	8005934 <_printf_i+0xd0>
 800592c:	232d      	movs	r3, #45	@ 0x2d
 800592e:	426d      	negs	r5, r5
 8005930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005934:	4859      	ldr	r0, [pc, #356]	@ (8005a9c <_printf_i+0x238>)
 8005936:	230a      	movs	r3, #10
 8005938:	e011      	b.n	800595e <_printf_i+0xfa>
 800593a:	6821      	ldr	r1, [r4, #0]
 800593c:	6833      	ldr	r3, [r6, #0]
 800593e:	0608      	lsls	r0, r1, #24
 8005940:	f853 5b04 	ldr.w	r5, [r3], #4
 8005944:	d402      	bmi.n	800594c <_printf_i+0xe8>
 8005946:	0649      	lsls	r1, r1, #25
 8005948:	bf48      	it	mi
 800594a:	b2ad      	uxthmi	r5, r5
 800594c:	2f6f      	cmp	r7, #111	@ 0x6f
 800594e:	4853      	ldr	r0, [pc, #332]	@ (8005a9c <_printf_i+0x238>)
 8005950:	6033      	str	r3, [r6, #0]
 8005952:	bf14      	ite	ne
 8005954:	230a      	movne	r3, #10
 8005956:	2308      	moveq	r3, #8
 8005958:	2100      	movs	r1, #0
 800595a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800595e:	6866      	ldr	r6, [r4, #4]
 8005960:	60a6      	str	r6, [r4, #8]
 8005962:	2e00      	cmp	r6, #0
 8005964:	bfa2      	ittt	ge
 8005966:	6821      	ldrge	r1, [r4, #0]
 8005968:	f021 0104 	bicge.w	r1, r1, #4
 800596c:	6021      	strge	r1, [r4, #0]
 800596e:	b90d      	cbnz	r5, 8005974 <_printf_i+0x110>
 8005970:	2e00      	cmp	r6, #0
 8005972:	d04b      	beq.n	8005a0c <_printf_i+0x1a8>
 8005974:	4616      	mov	r6, r2
 8005976:	fbb5 f1f3 	udiv	r1, r5, r3
 800597a:	fb03 5711 	mls	r7, r3, r1, r5
 800597e:	5dc7      	ldrb	r7, [r0, r7]
 8005980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005984:	462f      	mov	r7, r5
 8005986:	42bb      	cmp	r3, r7
 8005988:	460d      	mov	r5, r1
 800598a:	d9f4      	bls.n	8005976 <_printf_i+0x112>
 800598c:	2b08      	cmp	r3, #8
 800598e:	d10b      	bne.n	80059a8 <_printf_i+0x144>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	07df      	lsls	r7, r3, #31
 8005994:	d508      	bpl.n	80059a8 <_printf_i+0x144>
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	6861      	ldr	r1, [r4, #4]
 800599a:	4299      	cmp	r1, r3
 800599c:	bfde      	ittt	le
 800599e:	2330      	movle	r3, #48	@ 0x30
 80059a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059a8:	1b92      	subs	r2, r2, r6
 80059aa:	6122      	str	r2, [r4, #16]
 80059ac:	f8cd a000 	str.w	sl, [sp]
 80059b0:	464b      	mov	r3, r9
 80059b2:	aa03      	add	r2, sp, #12
 80059b4:	4621      	mov	r1, r4
 80059b6:	4640      	mov	r0, r8
 80059b8:	f7ff fee6 	bl	8005788 <_printf_common>
 80059bc:	3001      	adds	r0, #1
 80059be:	d14a      	bne.n	8005a56 <_printf_i+0x1f2>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	b004      	add	sp, #16
 80059c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f043 0320 	orr.w	r3, r3, #32
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	4833      	ldr	r0, [pc, #204]	@ (8005aa0 <_printf_i+0x23c>)
 80059d4:	2778      	movs	r7, #120	@ 0x78
 80059d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	6831      	ldr	r1, [r6, #0]
 80059de:	061f      	lsls	r7, r3, #24
 80059e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80059e4:	d402      	bmi.n	80059ec <_printf_i+0x188>
 80059e6:	065f      	lsls	r7, r3, #25
 80059e8:	bf48      	it	mi
 80059ea:	b2ad      	uxthmi	r5, r5
 80059ec:	6031      	str	r1, [r6, #0]
 80059ee:	07d9      	lsls	r1, r3, #31
 80059f0:	bf44      	itt	mi
 80059f2:	f043 0320 	orrmi.w	r3, r3, #32
 80059f6:	6023      	strmi	r3, [r4, #0]
 80059f8:	b11d      	cbz	r5, 8005a02 <_printf_i+0x19e>
 80059fa:	2310      	movs	r3, #16
 80059fc:	e7ac      	b.n	8005958 <_printf_i+0xf4>
 80059fe:	4827      	ldr	r0, [pc, #156]	@ (8005a9c <_printf_i+0x238>)
 8005a00:	e7e9      	b.n	80059d6 <_printf_i+0x172>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	f023 0320 	bic.w	r3, r3, #32
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	e7f6      	b.n	80059fa <_printf_i+0x196>
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	e7bd      	b.n	800598c <_printf_i+0x128>
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	6825      	ldr	r5, [r4, #0]
 8005a14:	6961      	ldr	r1, [r4, #20]
 8005a16:	1d18      	adds	r0, r3, #4
 8005a18:	6030      	str	r0, [r6, #0]
 8005a1a:	062e      	lsls	r6, r5, #24
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	d501      	bpl.n	8005a24 <_printf_i+0x1c0>
 8005a20:	6019      	str	r1, [r3, #0]
 8005a22:	e002      	b.n	8005a2a <_printf_i+0x1c6>
 8005a24:	0668      	lsls	r0, r5, #25
 8005a26:	d5fb      	bpl.n	8005a20 <_printf_i+0x1bc>
 8005a28:	8019      	strh	r1, [r3, #0]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6123      	str	r3, [r4, #16]
 8005a2e:	4616      	mov	r6, r2
 8005a30:	e7bc      	b.n	80059ac <_printf_i+0x148>
 8005a32:	6833      	ldr	r3, [r6, #0]
 8005a34:	1d1a      	adds	r2, r3, #4
 8005a36:	6032      	str	r2, [r6, #0]
 8005a38:	681e      	ldr	r6, [r3, #0]
 8005a3a:	6862      	ldr	r2, [r4, #4]
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f7fa fbce 	bl	80001e0 <memchr>
 8005a44:	b108      	cbz	r0, 8005a4a <_printf_i+0x1e6>
 8005a46:	1b80      	subs	r0, r0, r6
 8005a48:	6060      	str	r0, [r4, #4]
 8005a4a:	6863      	ldr	r3, [r4, #4]
 8005a4c:	6123      	str	r3, [r4, #16]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a54:	e7aa      	b.n	80059ac <_printf_i+0x148>
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	47d0      	blx	sl
 8005a60:	3001      	adds	r0, #1
 8005a62:	d0ad      	beq.n	80059c0 <_printf_i+0x15c>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	079b      	lsls	r3, r3, #30
 8005a68:	d413      	bmi.n	8005a92 <_printf_i+0x22e>
 8005a6a:	68e0      	ldr	r0, [r4, #12]
 8005a6c:	9b03      	ldr	r3, [sp, #12]
 8005a6e:	4298      	cmp	r0, r3
 8005a70:	bfb8      	it	lt
 8005a72:	4618      	movlt	r0, r3
 8005a74:	e7a6      	b.n	80059c4 <_printf_i+0x160>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4632      	mov	r2, r6
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	47d0      	blx	sl
 8005a80:	3001      	adds	r0, #1
 8005a82:	d09d      	beq.n	80059c0 <_printf_i+0x15c>
 8005a84:	3501      	adds	r5, #1
 8005a86:	68e3      	ldr	r3, [r4, #12]
 8005a88:	9903      	ldr	r1, [sp, #12]
 8005a8a:	1a5b      	subs	r3, r3, r1
 8005a8c:	42ab      	cmp	r3, r5
 8005a8e:	dcf2      	bgt.n	8005a76 <_printf_i+0x212>
 8005a90:	e7eb      	b.n	8005a6a <_printf_i+0x206>
 8005a92:	2500      	movs	r5, #0
 8005a94:	f104 0619 	add.w	r6, r4, #25
 8005a98:	e7f5      	b.n	8005a86 <_printf_i+0x222>
 8005a9a:	bf00      	nop
 8005a9c:	08005f9d 	.word	0x08005f9d
 8005aa0:	08005fae 	.word	0x08005fae

08005aa4 <__sflush_r>:
 8005aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aac:	0716      	lsls	r6, r2, #28
 8005aae:	4605      	mov	r5, r0
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	d454      	bmi.n	8005b5e <__sflush_r+0xba>
 8005ab4:	684b      	ldr	r3, [r1, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dc02      	bgt.n	8005ac0 <__sflush_r+0x1c>
 8005aba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dd48      	ble.n	8005b52 <__sflush_r+0xae>
 8005ac0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ac2:	2e00      	cmp	r6, #0
 8005ac4:	d045      	beq.n	8005b52 <__sflush_r+0xae>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005acc:	682f      	ldr	r7, [r5, #0]
 8005ace:	6a21      	ldr	r1, [r4, #32]
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	d030      	beq.n	8005b36 <__sflush_r+0x92>
 8005ad4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	0759      	lsls	r1, r3, #29
 8005ada:	d505      	bpl.n	8005ae8 <__sflush_r+0x44>
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ae2:	b10b      	cbz	r3, 8005ae8 <__sflush_r+0x44>
 8005ae4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aec:	6a21      	ldr	r1, [r4, #32]
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b0      	blx	r6
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	d106      	bne.n	8005b06 <__sflush_r+0x62>
 8005af8:	6829      	ldr	r1, [r5, #0]
 8005afa:	291d      	cmp	r1, #29
 8005afc:	d82b      	bhi.n	8005b56 <__sflush_r+0xb2>
 8005afe:	4a2a      	ldr	r2, [pc, #168]	@ (8005ba8 <__sflush_r+0x104>)
 8005b00:	410a      	asrs	r2, r1
 8005b02:	07d6      	lsls	r6, r2, #31
 8005b04:	d427      	bmi.n	8005b56 <__sflush_r+0xb2>
 8005b06:	2200      	movs	r2, #0
 8005b08:	6062      	str	r2, [r4, #4]
 8005b0a:	04d9      	lsls	r1, r3, #19
 8005b0c:	6922      	ldr	r2, [r4, #16]
 8005b0e:	6022      	str	r2, [r4, #0]
 8005b10:	d504      	bpl.n	8005b1c <__sflush_r+0x78>
 8005b12:	1c42      	adds	r2, r0, #1
 8005b14:	d101      	bne.n	8005b1a <__sflush_r+0x76>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	b903      	cbnz	r3, 8005b1c <__sflush_r+0x78>
 8005b1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b1e:	602f      	str	r7, [r5, #0]
 8005b20:	b1b9      	cbz	r1, 8005b52 <__sflush_r+0xae>
 8005b22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b26:	4299      	cmp	r1, r3
 8005b28:	d002      	beq.n	8005b30 <__sflush_r+0x8c>
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7ff fbf2 	bl	8005314 <_free_r>
 8005b30:	2300      	movs	r3, #0
 8005b32:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b34:	e00d      	b.n	8005b52 <__sflush_r+0xae>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b0      	blx	r6
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	1c50      	adds	r0, r2, #1
 8005b40:	d1c9      	bne.n	8005ad6 <__sflush_r+0x32>
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0c6      	beq.n	8005ad6 <__sflush_r+0x32>
 8005b48:	2b1d      	cmp	r3, #29
 8005b4a:	d001      	beq.n	8005b50 <__sflush_r+0xac>
 8005b4c:	2b16      	cmp	r3, #22
 8005b4e:	d11e      	bne.n	8005b8e <__sflush_r+0xea>
 8005b50:	602f      	str	r7, [r5, #0]
 8005b52:	2000      	movs	r0, #0
 8005b54:	e022      	b.n	8005b9c <__sflush_r+0xf8>
 8005b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b5a:	b21b      	sxth	r3, r3
 8005b5c:	e01b      	b.n	8005b96 <__sflush_r+0xf2>
 8005b5e:	690f      	ldr	r7, [r1, #16]
 8005b60:	2f00      	cmp	r7, #0
 8005b62:	d0f6      	beq.n	8005b52 <__sflush_r+0xae>
 8005b64:	0793      	lsls	r3, r2, #30
 8005b66:	680e      	ldr	r6, [r1, #0]
 8005b68:	bf08      	it	eq
 8005b6a:	694b      	ldreq	r3, [r1, #20]
 8005b6c:	600f      	str	r7, [r1, #0]
 8005b6e:	bf18      	it	ne
 8005b70:	2300      	movne	r3, #0
 8005b72:	eba6 0807 	sub.w	r8, r6, r7
 8005b76:	608b      	str	r3, [r1, #8]
 8005b78:	f1b8 0f00 	cmp.w	r8, #0
 8005b7c:	dde9      	ble.n	8005b52 <__sflush_r+0xae>
 8005b7e:	6a21      	ldr	r1, [r4, #32]
 8005b80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b82:	4643      	mov	r3, r8
 8005b84:	463a      	mov	r2, r7
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b0      	blx	r6
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	dc08      	bgt.n	8005ba0 <__sflush_r+0xfc>
 8005b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	4407      	add	r7, r0
 8005ba2:	eba8 0800 	sub.w	r8, r8, r0
 8005ba6:	e7e7      	b.n	8005b78 <__sflush_r+0xd4>
 8005ba8:	dfbffffe 	.word	0xdfbffffe

08005bac <_fflush_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	690b      	ldr	r3, [r1, #16]
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b913      	cbnz	r3, 8005bbc <_fflush_r+0x10>
 8005bb6:	2500      	movs	r5, #0
 8005bb8:	4628      	mov	r0, r5
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	b118      	cbz	r0, 8005bc6 <_fflush_r+0x1a>
 8005bbe:	6a03      	ldr	r3, [r0, #32]
 8005bc0:	b90b      	cbnz	r3, 8005bc6 <_fflush_r+0x1a>
 8005bc2:	f7ff f9ad 	bl	8004f20 <__sinit>
 8005bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f3      	beq.n	8005bb6 <_fflush_r+0xa>
 8005bce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bd0:	07d0      	lsls	r0, r2, #31
 8005bd2:	d404      	bmi.n	8005bde <_fflush_r+0x32>
 8005bd4:	0599      	lsls	r1, r3, #22
 8005bd6:	d402      	bmi.n	8005bde <_fflush_r+0x32>
 8005bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bda:	f7ff fb98 	bl	800530e <__retarget_lock_acquire_recursive>
 8005bde:	4628      	mov	r0, r5
 8005be0:	4621      	mov	r1, r4
 8005be2:	f7ff ff5f 	bl	8005aa4 <__sflush_r>
 8005be6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005be8:	07da      	lsls	r2, r3, #31
 8005bea:	4605      	mov	r5, r0
 8005bec:	d4e4      	bmi.n	8005bb8 <_fflush_r+0xc>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	059b      	lsls	r3, r3, #22
 8005bf2:	d4e1      	bmi.n	8005bb8 <_fflush_r+0xc>
 8005bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bf6:	f7ff fb8b 	bl	8005310 <__retarget_lock_release_recursive>
 8005bfa:	e7dd      	b.n	8005bb8 <_fflush_r+0xc>

08005bfc <__swhatbuf_r>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	460c      	mov	r4, r1
 8005c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c04:	2900      	cmp	r1, #0
 8005c06:	b096      	sub	sp, #88	@ 0x58
 8005c08:	4615      	mov	r5, r2
 8005c0a:	461e      	mov	r6, r3
 8005c0c:	da0d      	bge.n	8005c2a <__swhatbuf_r+0x2e>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	bf14      	ite	ne
 8005c1a:	2340      	movne	r3, #64	@ 0x40
 8005c1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c20:	2000      	movs	r0, #0
 8005c22:	6031      	str	r1, [r6, #0]
 8005c24:	602b      	str	r3, [r5, #0]
 8005c26:	b016      	add	sp, #88	@ 0x58
 8005c28:	bd70      	pop	{r4, r5, r6, pc}
 8005c2a:	466a      	mov	r2, sp
 8005c2c:	f000 f848 	bl	8005cc0 <_fstat_r>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	dbec      	blt.n	8005c0e <__swhatbuf_r+0x12>
 8005c34:	9901      	ldr	r1, [sp, #4]
 8005c36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c3e:	4259      	negs	r1, r3
 8005c40:	4159      	adcs	r1, r3
 8005c42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c46:	e7eb      	b.n	8005c20 <__swhatbuf_r+0x24>

08005c48 <__smakebuf_r>:
 8005c48:	898b      	ldrh	r3, [r1, #12]
 8005c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c4c:	079d      	lsls	r5, r3, #30
 8005c4e:	4606      	mov	r6, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	d507      	bpl.n	8005c64 <__smakebuf_r+0x1c>
 8005c54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	6123      	str	r3, [r4, #16]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	6163      	str	r3, [r4, #20]
 8005c60:	b003      	add	sp, #12
 8005c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c64:	ab01      	add	r3, sp, #4
 8005c66:	466a      	mov	r2, sp
 8005c68:	f7ff ffc8 	bl	8005bfc <__swhatbuf_r>
 8005c6c:	9f00      	ldr	r7, [sp, #0]
 8005c6e:	4605      	mov	r5, r0
 8005c70:	4639      	mov	r1, r7
 8005c72:	4630      	mov	r0, r6
 8005c74:	f7ff fbba 	bl	80053ec <_malloc_r>
 8005c78:	b948      	cbnz	r0, 8005c8e <__smakebuf_r+0x46>
 8005c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c7e:	059a      	lsls	r2, r3, #22
 8005c80:	d4ee      	bmi.n	8005c60 <__smakebuf_r+0x18>
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	e7e2      	b.n	8005c54 <__smakebuf_r+0xc>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	6020      	str	r0, [r4, #0]
 8005c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	9b01      	ldr	r3, [sp, #4]
 8005c9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c9e:	b15b      	cbz	r3, 8005cb8 <__smakebuf_r+0x70>
 8005ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 f81d 	bl	8005ce4 <_isatty_r>
 8005caa:	b128      	cbz	r0, 8005cb8 <__smakebuf_r+0x70>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	431d      	orrs	r5, r3
 8005cbc:	81a5      	strh	r5, [r4, #12]
 8005cbe:	e7cf      	b.n	8005c60 <__smakebuf_r+0x18>

08005cc0 <_fstat_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4d07      	ldr	r5, [pc, #28]	@ (8005ce0 <_fstat_r+0x20>)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	4608      	mov	r0, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	f7fb fcda 	bl	8001686 <_fstat>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d102      	bne.n	8005cdc <_fstat_r+0x1c>
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	b103      	cbz	r3, 8005cdc <_fstat_r+0x1c>
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	bd38      	pop	{r3, r4, r5, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000038c 	.word	0x2000038c

08005ce4 <_isatty_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d06      	ldr	r5, [pc, #24]	@ (8005d00 <_isatty_r+0x1c>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	602b      	str	r3, [r5, #0]
 8005cf0:	f7fb fcd9 	bl	80016a6 <_isatty>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_isatty_r+0x1a>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_isatty_r+0x1a>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	2000038c 	.word	0x2000038c

08005d04 <_sbrk_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d06      	ldr	r5, [pc, #24]	@ (8005d20 <_sbrk_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fb fce2 	bl	80016d8 <_sbrk>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_sbrk_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_sbrk_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	2000038c 	.word	0x2000038c

08005d24 <_init>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	bf00      	nop
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr

08005d30 <_fini>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	bf00      	nop
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr
